function [methodinfo,structs,enuminfo,ThunkLibName]=dss_capi
    %DSS_CAPI Create structures to define interfaces found in 'dss_capi'.
    
    % This file is a slightly modified version of the version generated 
    % automatically which uses the thunk DLL. Although using cdecl instead 
    % of thunk is officially unsupported, we only use simple pointers 
    % and values, without any complex structure. 
    % Tested on Windows, Linux and macOS.
    
    ival={cell(1,1788)};
    structs=[];enuminfo=[];fcnNum=1;
    fcns = struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);

    ThunkLibName = '';
    % void DSS_ResetStringBuffer ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSS_ResetStringBuffer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Dispose_PByte ( int8_t ** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PByte'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8PtrPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PDouble ( double ** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PDouble'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PInteger ( int32_t ** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PInteger'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PPAnsiChar ( char *** p , int32_t cnt ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='DSS_Dispose_PPAnsiChar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * DSS_Get_PAnsiChar ( void * p , int32_t index ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='DSS_Get_PAnsiChar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void DSS_RegisterPlotCallback ( dss_callback_plot_t cb ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_RegisterPlotCallback'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
    % void DSS_RegisterMessageCallback ( dss_callback_message_t cb ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_RegisterMessageCallback'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
    % char * DSS_ExtractSchema ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='DSS_ExtractSchema'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_String ( char * S ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_Dispose_String'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PPointer ( void *** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PPointer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr'};fcnNum=fcnNum+1;
    % void * Obj_New ( void * ctx , int32_t ClsIdx , const char * Name , uint16_t Activate , uint16_t BeginEdit ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32cstringuint16uint16Thunk';fcns.name{fcnNum}='Obj_New'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring', 'uint16', 'uint16'};fcnNum=fcnNum+1;
    % int32_t Obj_GetCount ( void * ctx , int32_t ClsIdx ); 
    fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetCount'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void * Obj_GetHandleByName ( void * ctx , int32_t ClsIdx , const char * Name ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Obj_GetHandleByName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void * Obj_GetHandleByIdx ( void * ctx , int32_t ClsIdx , int32_t Idx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Obj_GetHandleByIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % uint16_t Obj_PropertySideEffects ( void * obj , int32_t Index , int32_t PreviousInt ); 
    fcns.thunkname{fcnNum}='uint16voidPtrint32int32Thunk';fcns.name{fcnNum}='Obj_PropertySideEffects'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Obj_BeginEdit ( void * obj ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='Obj_BeginEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void Obj_EndEdit ( void * obj , int32_t NumChanges ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_EndEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t Obj_GetNumProperties ( void * obj ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='Obj_GetNumProperties'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * Obj_ToJSON ( void * obj , int32_t options ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * Batch_ToJSON ( void ** batch , int32_t batchSize , int32_t options ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % char * Obj_GetName ( void * obj ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='Obj_GetName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * Obj_GetClassName ( void * obj ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='Obj_GetClassName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t Obj_GetIdx ( void * obj ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='Obj_GetIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * Obj_GetClassIdx ( void * obj ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='Obj_GetClassIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void Obj_Activate ( void * obj , uint16_t AllLists ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='Obj_Activate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % int32_t * Obj_GetPropSeqPtr ( void * obj ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='Obj_GetPropSeqPtr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double Obj_GetFloat64 ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='doublevoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t Obj_GetInt32 ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetInt32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void * Obj_GetObject ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * Obj_GetString ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * Obj_GetAsString ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetAsString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetFloat64Array ( double ** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetFloat64Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetInt32Array ( int32_t ** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetInt32Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetStringArray ( char *** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetStringArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetObjectArray ( void *** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetObjectArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetAsString ( void * obj , int32_t Index , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringThunk';fcns.name{fcnNum}='Obj_SetAsString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Obj_SetFloat64 ( void * obj , int32_t Index , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32doubleThunk';fcns.name{fcnNum}='Obj_SetFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'double'};fcnNum=fcnNum+1;
    % void Obj_SetInt32 ( void * obj , int32_t Index , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='Obj_SetInt32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetString ( void * obj , int32_t Index , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringThunk';fcns.name{fcnNum}='Obj_SetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Obj_SetObject ( void * obj , int32_t Index , void * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='Obj_SetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
    % void Obj_SetFloat64Array ( void * obj , int32_t Index , double * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetFloat64Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetInt32Array ( void * obj , int32_t Index , int32_t * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetInt32Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetStringArray ( void * obj , int32_t Index , const char ** Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetStringArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetObjectArray ( void * obj , int32_t Index , void ** Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetObjectArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_Dispose ( void ** batch ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='Batch_Dispose'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_BeginEdit ( void ** batch , int32_t batchSize ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_BeginEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_EndEdit ( void ** batch , int32_t batchSize , int32_t numEdits ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_EndEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetPropSeq ( int32_t ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_GetPropSeq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateFromNew ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsid , const char ** names , int32_t count , uint16_t BeginEdit ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32voidPtrint32uint16Thunk';fcns.name{fcnNum}='Batch_CreateFromNew'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'stringPtrPtr', 'int32', 'uint16'};fcnNum=fcnNum+1;
    % void Batch_CreateByClass ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsidx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_CreateByClass'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateByRegExp ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsidx , const char * re ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_CreateByRegExp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_CreateByIndex ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsidx , int32_t * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Batch_CreateByIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateByInt32Property ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t ClsIdx , int32_t idx , int32_t value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32int32Thunk';fcns.name{fcnNum}='Batch_CreateByInt32Property'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetFloat64 ( double ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetInt32 ( int32_t ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetInt32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetString ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetAsString ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetAsString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetObject ( void *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_Float64 ( void ** batch , int32_t batchSize , int32_t Index , int32_t Operation , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32int32doubleThunk';fcns.name{fcnNum}='Batch_Float64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
    % void Batch_Int32 ( void ** batch , int32_t batchSize , int32_t Index , int32_t Operation , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='Batch_Int32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_SetString ( void ** batch , int32_t batchSize , int32_t Index , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32cstringThunk';fcns.name{fcnNum}='Batch_SetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_SetObject ( void ** batch , int32_t batchSize , int32_t Index , const void * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
    % void Batch_SetFloat64Array ( void ** batch , int32_t batchSize , int32_t Index , double * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetFloat64Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
    % void Batch_SetInt32Array ( void ** batch , int32_t batchSize , int32_t Index , int32_t * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetInt32Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Batch_SetStringArray ( void ** batch , int32_t batchSize , int32_t Index , const char ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetStringArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'stringPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_SetObjectArray ( void ** batch , int32_t batchSize , int32_t Index , const void ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetObjectArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'voidPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_CreateFromNewS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , const char ** names , int32_t count , uint16_t BeginEdit ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringvoidPtrint32uint16Thunk';fcns.name{fcnNum}='Batch_CreateFromNewS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'stringPtrPtr', 'int32', 'uint16'};fcnNum=fcnNum+1;
    % void Batch_CreateByClassS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='Batch_CreateByClassS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_CreateByRegExpS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , const char * re ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringcstringThunk';fcns.name{fcnNum}='Batch_CreateByRegExpS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_CreateByIndexS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , int32_t * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_CreateByIndexS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateByInt32PropertyS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , const char * Name , int32_t value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringcstringint32Thunk';fcns.name{fcnNum}='Batch_CreateByInt32PropertyS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetFloat64S ( double ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetFloat64S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetInt32S ( int32_t ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetInt32S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetStringS ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetStringS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetAsStringS ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetAsStringS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetObjectS ( void *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetObjectS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_Float64S ( void ** batch , int32_t batchSize , const char * Name , int32_t Operation , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringint32doubleThunk';fcns.name{fcnNum}='Batch_Float64S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'int32', 'double'};fcnNum=fcnNum+1;
    % void Batch_Int32S ( void ** batch , int32_t batchSize , const char * Name , int32_t Operation , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringint32int32Thunk';fcns.name{fcnNum}='Batch_Int32S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_SetStringS ( void ** batch , int32_t batchSize , const char * Name , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringcstringThunk';fcns.name{fcnNum}='Batch_SetStringS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_SetObjectS ( void ** batch , int32_t batchSize , const char * Name , const void * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetObjectS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'voidPtr'};fcnNum=fcnNum+1;
    % void Batch_SetFloat64ArrayS ( void ** batch , int32_t batchSize , const char * Name , double * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetFloat64ArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
    % void Batch_SetInt32ArrayS ( void ** batch , int32_t batchSize , const char * Name , int32_t * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetInt32ArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Batch_SetStringArrayS ( void ** batch , int32_t batchSize , const char * Name , const char ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetStringArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'stringPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_SetObjectArrayS ( void ** batch , int32_t batchSize , const char * Name , const void ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetObjectArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'voidPtrPtr'};fcnNum=fcnNum+1;
    % void * DSS_BeginPascalThread ( void * func , void * paramptr ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DSS_BeginPascalThread'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
    % void DSS_WaitPascalThread ( void * handle ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_WaitPascalThread'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void DSS_SetMessagesMO ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_SetMessagesMO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSS_SetPropertiesMO ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_SetPropertiesMO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void * ctx_New ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='ctx_New'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ctx_Dispose ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Dispose'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void * ctx_Get_Prime ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='ctx_Get_Prime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void * ctx_Set_Prime ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Set_Prime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_ResetStringBuffer ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_ResetStringBuffer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_DisposeGRData ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_DisposeGRData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_GetGRPointers ( void * ctx , char **** DataPtr_PPAnsiChar , double *** DataPtr_PDouble , int32_t *** DataPtr_PInteger , int8_t *** DataPtr_PByte , int32_t ** CountPtr_PPAnsiChar , int32_t ** CountPtr_PDouble , int32_t ** CountPtr_PInteger , int32_t ** CountPtr_PByte ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_GetGRPointers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtr', 'doublePtrPtrPtr', 'int32PtrPtrPtr', 'voidPtr', 'int32PtrPtr', 'int32PtrPtr', 'int32PtrPtr', 'int32PtrPtr'};fcnNum=fcnNum+1;
    % double * ctx_DSS_GR_DataPtr_PDouble ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_GR_DataPtr_PDouble'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t * ctx_DSS_GR_DataPtr_PInteger ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_GR_DataPtr_PInteger'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int8_t * ctx_DSS_GR_DataPtr_PByte ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_GR_DataPtr_PByte'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t * ctx_DSS_GR_CountPtr_PDouble ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_GR_CountPtr_PDouble'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t * ctx_DSS_GR_CountPtr_PInteger ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_GR_CountPtr_PInteger'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t * ctx_DSS_GR_CountPtr_PByte ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_GR_CountPtr_PByte'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_RegisterPlotCallback ( void * ctx , dss_callback_plot_t cb ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_RegisterPlotCallback'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_RegisterMessageCallback ( void * ctx , dss_callback_message_t cb ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_RegisterMessageCallback'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_NewCircuit ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_DSS_NewCircuit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ActiveClass_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_ActiveClass_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_ActiveClass_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_ActiveClass_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_ActiveClass_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ActiveClass_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ActiveClass_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_ActiveClass_Get_NumElements ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_NumElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_ActiveClass_Get_ActiveClassName ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_ActiveClassName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_ActiveClass_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_ActiveClass_Get_ActiveClassParent ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_ActiveClass_Get_ActiveClassParent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_ActiveClass_ToJSON ( void * ctx , int32_t options ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_ActiveClass_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Bus_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Bus_Get_NumNodes ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_NumNodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_SeqVoltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_SeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_SeqVoltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_SeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Voltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Voltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Voltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Voltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Nodes ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Nodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Nodes_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Nodes_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Isc ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Isc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Isc_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Isc_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Voc ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Voc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Voc_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Voc_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_kVBase ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_kVBase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_puVoltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_puVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_puVoltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_puVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Zsc0 ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Zsc0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Zsc0_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Zsc0_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Zsc1 ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Zsc1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_Zsc1_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Zsc1_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_ZscMatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_ZscMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_ZscMatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_ZscMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Bus_ZscRefresh ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Bus_ZscRefresh'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_YscMatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_YscMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_YscMatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_YscMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Bus_Get_Coorddefined ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Coorddefined'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_x ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Set_x ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Bus_Set_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_y ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Set_y ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Bus_Set_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_Distance ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Distance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Bus_GetUniqueNodeNumber ( void * ctx , int32_t StartNumber ); 
    fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ctx_Bus_GetUniqueNodeNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_CplxSeqVoltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_CplxSeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_CplxSeqVoltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_CplxSeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_Int_Duration ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Int_Duration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_Lambda ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Lambda'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_Cust_Duration ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Cust_Duration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_Cust_Interrupts ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Cust_Interrupts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Bus_Get_N_Customers ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_N_Customers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_N_interrupts ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_N_interrupts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_puVLL ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_puVLL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_puVLL_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_puVLL_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_VLL ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_VLL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_VLL_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_VLL_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_puVmagAngle ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_puVmagAngle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_puVmagAngle_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_puVmagAngle_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_VMagAngle ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_VMagAngle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_VMagAngle_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_VMagAngle_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Bus_Get_TotalMiles ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_TotalMiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Bus_Get_SectionID ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_SectionID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_LineList ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_LineList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_LineList_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_LineList_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_LoadList ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_LoadList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_LoadList_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_LoadList_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_ZSC012Matrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_ZSC012Matrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_ZSC012Matrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_ZSC012Matrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_AllPCEatBus ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_AllPCEatBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Bus_Get_AllPDEatBus ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_AllPDEatBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Capacitors_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Capacitors_Get_IsDelta ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Capacitors_Get_kV ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Capacitors_Get_kvar ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Capacitors_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Capacitors_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Capacitors_Get_NumSteps ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_NumSteps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Set_IsDelta ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Capacitors_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Set_kV ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Capacitors_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Set_kvar ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Capacitors_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Capacitors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Set_NumSteps ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Capacitors_Set_NumSteps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Capacitors_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Capacitors_AddStep ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_AddStep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Capacitors_SubtractStep ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_SubtractStep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Capacitors_Get_AvailableSteps ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_AvailableSteps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Get_States ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_States'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Get_States_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_States_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Set_States ( void * ctx , int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Capacitors_Set_States'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Open ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Close ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_CapControls_Get_Capacitor ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Capacitor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_CTratio ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_CTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_DeadTime ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_DeadTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_Delay ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_DelayOff ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_DelayOff'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CapControls_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CapControls_Get_Mode ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_CapControls_Get_MonitoredObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CapControls_Get_MonitoredTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_CapControls_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CapControls_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_OFFSetting ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_OFFSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_ONSetting ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_ONSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_PTratio ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_CapControls_Get_UseVoltOverride ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_UseVoltOverride'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_Vmax ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Vmax'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CapControls_Get_Vmin ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Vmin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_Capacitor ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_CapControls_Set_Capacitor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_CTratio ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_CTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_DeadTime ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_DeadTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_Delay ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_DelayOff ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_DelayOff'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_Mode ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CapControls_Set_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_MonitoredObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_CapControls_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_MonitoredTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CapControls_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_CapControls_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_OFFSetting ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_OFFSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_ONSetting ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_ONSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_PTratio ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_UseVoltOverride ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_CapControls_Set_UseVoltOverride'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_Vmax ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_Vmax'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_Vmin ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CapControls_Set_Vmin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_CapControls_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Circuit_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_Get_NumBuses ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_NumBuses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_Get_NumCktElements ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_NumCktElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_Get_NumNodes ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_NumNodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_LineLosses ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_LineLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_LineLosses_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_LineLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_Losses ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_Losses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_Losses_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_Losses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusVmag ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusVmag'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusVmag_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusVmag_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusVolts ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusVolts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusVolts_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusVolts_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllElementNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllElementNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllElementNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllElementNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_SubstationLosses ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_SubstationLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_SubstationLosses_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_SubstationLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_TotalPower ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_TotalPower'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_TotalPower_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_TotalPower_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Disable ( void * ctx , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Circuit_Disable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Enable ( void * ctx , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Circuit_Enable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_FirstPCElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_FirstPCElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_FirstPDElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_FirstPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_NextPCElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_NextPCElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_NextPDElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_NextPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllElementLosses ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllElementLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllElementLosses_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllElementLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Sample ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Sample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_SaveSample ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_SaveSample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_SetActiveElement ( void * ctx , const char * FullName ); 
    fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ctx_Circuit_SetActiveElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Circuit_Capacity ( void * ctx , double Start , double Increment ); 
    fcns.thunkname{fcnNum}='doublevoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_Circuit_Capacity'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusVmagPu ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusVmagPu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusVmagPu_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusVmagPu_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_SetActiveBus ( void * ctx , const char * BusName ); 
    fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ctx_Circuit_SetActiveBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_SetActiveBusi ( void * ctx , int32_t BusIndex ); 
    fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_SetActiveBusi'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_SystemY ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_SystemY'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_SystemY_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_SystemY_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusDistances ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusDistances'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllBusDistances_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllBusDistances_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeDistances ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeDistances'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeDistances_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeDistances_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeDistancesByPhase ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeDistancesByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeDistancesByPhase_GR ( void * ctx , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeDistancesByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeVmagByPhase ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeVmagByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeVmagByPhase_GR ( void * ctx , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeVmagByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeVmagPUByPhase ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeVmagPUByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeVmagPUByPhase_GR ( void * ctx , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeVmagPUByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeNamesByPhase ( void * ctx , char *** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeNamesByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_AllNodeNamesByPhase_GR ( void * ctx , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_AllNodeNamesByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_SetActiveClass ( void * ctx , const char * ClassName ); 
    fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ctx_Circuit_SetActiveClass'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_FirstElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_FirstElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_NextElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_NextElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_UpdateStorage ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_UpdateStorage'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Circuit_Get_ParentPDElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_ParentPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_EndOfTimeStepUpdate ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_EndOfTimeStepUpdate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_YNodeOrder ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_YNodeOrder'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_YNodeOrder_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_YNodeOrder_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_YCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_YCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_YCurrents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_YCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_YNodeVarray ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_YNodeVarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_YNodeVarray_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Circuit_Get_YNodeVarray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Circuit_SetCktElementName ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Circuit_SetCktElementName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Circuit_SetCktElementIndex ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_SetCktElementIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_BusNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_BusNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_BusNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_BusNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_CktElement_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_NumConductors ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NumConductors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_NumPhases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NumPhases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_NumTerminals ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NumTerminals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Set_BusNames ( void * ctx , char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CktElement_Set_BusNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Currents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Currents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Currents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Currents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Voltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Voltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Voltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Voltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CktElement_Get_EmergAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_CktElement_Get_Enabled ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Enabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Losses ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Losses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Losses_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Losses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CktElement_Get_NormalAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NormalAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_PhaseLosses ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_PhaseLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_PhaseLosses_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_PhaseLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Powers ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Powers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Powers_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Powers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_SeqCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_SeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_SeqCurrents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_SeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_SeqPowers ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_SeqPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_SeqPowers_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_SeqPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_SeqVoltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_SeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_SeqVoltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_SeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Close ( void * ctx , int32_t Term , int32_t Phs ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='ctx_CktElement_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Open ( void * ctx , int32_t Term , int32_t Phs ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='ctx_CktElement_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Set_EmergAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CktElement_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Set_Enabled ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_CktElement_Set_Enabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Set_NormalAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CktElement_Set_NormalAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % uint16_t ctx_CktElement_IsOpen ( void * ctx , int32_t Term , int32_t Phs ); 
    fcns.thunkname{fcnNum}='uint16voidPtrint32int32Thunk';fcns.name{fcnNum}='ctx_CktElement_IsOpen'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_AllPropertyNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_AllPropertyNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_AllPropertyNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_AllPropertyNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_NumProperties ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NumProperties'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Residuals ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Residuals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Residuals_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Residuals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Yprim ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Yprim'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_Yprim_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Yprim_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_CktElement_Get_DisplayName ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_DisplayName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_CktElement_Get_GUID ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_GUID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_Handle ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Handle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Set_DisplayName ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_CktElement_Set_DisplayName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_CktElement_Get_Controller ( void * ctx , int32_t idx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CktElement_Get_Controller'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_CktElement_Get_EnergyMeter ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_EnergyMeter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_CktElement_Get_HasVoltControl ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_HasVoltControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_CktElement_Get_HasSwitchControl ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_HasSwitchControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_CplxSeqVoltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_CplxSeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_CplxSeqVoltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_CplxSeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_CplxSeqCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_CplxSeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_CplxSeqCurrents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_CplxSeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_AllVariableNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_AllVariableNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_AllVariableNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_AllVariableNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_AllVariableValues ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_AllVariableValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_AllVariableValues_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_AllVariableValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CktElement_Get_Variable ( void * ctx , const char * MyVarName , int32_t * Code ); 
    fcns.thunkname{fcnNum}='doublevoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Variable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Set_Variable ( void * ctx , const char * MyVarName , int32_t * Code , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CktElement_Set_Variable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32Ptr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CktElement_Get_Variablei ( void * ctx , int32_t Idx , int32_t * Code ); 
    fcns.thunkname{fcnNum}='doublevoidPtrint32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_Variablei'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Set_Variablei ( void * ctx , int32_t Idx , int32_t * Code , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CktElement_Set_Variablei'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr', 'double'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_NodeOrder ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NodeOrder'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_NodeOrder_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NodeOrder_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_CktElement_Get_HasOCPDevice ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_HasOCPDevice'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_NumControls ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NumControls'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_OCPDevIndex ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_OCPDevIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CktElement_Get_OCPDevType ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_OCPDevType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_CurrentsMagAng ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_CurrentsMagAng'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_CurrentsMagAng_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_CurrentsMagAng_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_VoltagesMagAng ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_VoltagesMagAng'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_VoltagesMagAng_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_VoltagesMagAng_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_CktElement_Get_IsIsolated ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_IsIsolated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_TotalPowers ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_TotalPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_TotalPowers_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_TotalPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_cmplx ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cmplx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_cmplx_GR ( void * ctx , double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cmplx_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double'};fcnNum=fcnNum+1;
    % double ctx_CmathLib_Get_cabs ( void * ctx , double realpart , double imagpart ); 
    fcns.thunkname{fcnNum}='doublevoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cabs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double'};fcnNum=fcnNum+1;
    % double ctx_CmathLib_Get_cdang ( void * ctx , double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='doublevoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cdang'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_ctopolardeg ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_ctopolardeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_ctopolardeg_GR ( void * ctx , double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_ctopolardeg_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_pdegtocomplex ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double magnitude , double angle ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_pdegtocomplex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_pdegtocomplex_GR ( void * ctx , double magnitude , double angle ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_pdegtocomplex_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_cmul ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cmul'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_cmul_GR ( void * ctx , double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cmul_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_cdiv ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cdiv'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CmathLib_Get_cdiv_GR ( void * ctx , double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='ctx_CmathLib_Get_cdiv_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_ClearQueue ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_ClearQueue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_Delete ( void * ctx , int32_t ActionHandle ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CtrlQueue_Delete'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_CtrlQueue_Get_ActionCode ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Get_ActionCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CtrlQueue_Get_DeviceHandle ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Get_DeviceHandle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CtrlQueue_Get_NumActions ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Get_NumActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CtrlQueue_Push ( void * ctx , int32_t Hour , double Seconds , int32_t ActionCode , int32_t DeviceHandle ); 
    fcns.thunkname{fcnNum}='int32voidPtrint32doubleint32int32Thunk';fcns.name{fcnNum}='ctx_CtrlQueue_Push'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'double', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_Show ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Show'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_ClearActions ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_ClearActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CtrlQueue_Get_PopAction ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Get_PopAction'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_Set_Action ( void * ctx , int32_t Param1 ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CtrlQueue_Set_Action'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_CtrlQueue_Get_QueueSize ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Get_QueueSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_DoAllQueue ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_DoAllQueue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_Get_Queue ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Get_Queue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CtrlQueue_Get_Queue_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CtrlQueue_Get_Queue_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_DSS_Get_NumCircuits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_NumCircuits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_ClearAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_ClearAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Get_Version ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_Version'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_DSS_Start ( void * ctx , int32_t code ); 
    fcns.thunkname{fcnNum}='uint16voidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSS_Start'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_DSS_Get_Classes ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_Classes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Get_Classes_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_Classes_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Get_UserClasses ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_UserClasses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Get_UserClasses_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_UserClasses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_DSS_Get_NumClasses ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_NumClasses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_DSS_Get_NumUserClasses ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_NumUserClasses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Get_DataPath ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_DataPath'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Set_DataPath ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_DSS_Set_DataPath'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_DSS_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Get_DefaultEditor ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_DefaultEditor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_DSS_SetActiveClass ( void * ctx , const char * ClassName ); 
    fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ctx_DSS_SetActiveClass'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % uint16_t ctx_DSS_Get_AllowForms ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_AllowForms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Set_AllowForms ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_DSS_Set_AllowForms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_DSS_Get_AllowEditor ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_AllowEditor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Set_AllowEditor ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_DSS_Set_AllowEditor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_DSS_Get_LegacyModels ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_LegacyModels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Set_LegacyModels ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_DSS_Set_LegacyModels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_DSS_Get_AllowDOScmd ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_AllowDOScmd'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Set_AllowDOScmd ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_DSS_Set_AllowDOScmd'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_DSS_Get_AllowChangeDir ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_AllowChangeDir'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Set_AllowChangeDir ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_DSS_Set_AllowChangeDir'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_DSS_Get_COMErrorResults ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Get_COMErrorResults'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSS_Set_COMErrorResults ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_DSS_Set_COMErrorResults'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_DSSElement_Get_AllPropertyNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSElement_Get_AllPropertyNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_DSSElement_Get_AllPropertyNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSElement_Get_AllPropertyNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSSElement_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSElement_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_DSSElement_Get_NumProperties ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_DSSElement_Get_NumProperties'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSSElement_ToJSON ( void * ctx , int32_t options ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSSElement_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_DSSimComs_BusVoltagepu ( void * ctx , double ** ResultPtr , int32_t * ResultCount , size_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='ctx_DSSimComs_BusVoltagepu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'uint64'};fcnNum=fcnNum+1;
    % void ctx_DSSimComs_BusVoltagepu_GR ( void * ctx , size_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint64Thunk';fcns.name{fcnNum}='ctx_DSSimComs_BusVoltagepu_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
    % void ctx_DSSimComs_BusVoltage ( void * ctx , double ** ResultPtr , int32_t * ResultCount , size_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='ctx_DSSimComs_BusVoltage'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'uint64'};fcnNum=fcnNum+1;
    % void ctx_DSSimComs_BusVoltage_GR ( void * ctx , size_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint64Thunk';fcns.name{fcnNum}='ctx_DSSimComs_BusVoltage_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
    % void ctx_DSSProgress_Close ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSProgress_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSSProgress_Set_Caption ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_DSSProgress_Set_Caption'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_DSSProgress_Set_PctProgress ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSSProgress_Set_PctProgress'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_DSSProgress_Show ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSProgress_Show'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSSProperty_Get_Description ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSProperty_Get_Description'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSSProperty_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSProperty_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSSProperty_Get_Val ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_DSSProperty_Get_Val'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_DSSProperty_Set_Val ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_DSSProperty_Set_Val'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_DSSProperty_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_DSSProperty_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_DSSProperty_Set_Index ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSSProperty_Set_Index'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Executive_Get_Command ( void * ctx , int32_t i ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSS_Executive_Get_Command'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_DSS_Executive_Get_NumCommands ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Executive_Get_NumCommands'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_DSS_Executive_Get_NumOptions ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_DSS_Executive_Get_NumOptions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Executive_Get_Option ( void * ctx , int32_t i ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSS_Executive_Get_Option'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Executive_Get_CommandHelp ( void * ctx , int32_t i ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSS_Executive_Get_CommandHelp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Executive_Get_OptionHelp ( void * ctx , int32_t i ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSS_Executive_Get_OptionHelp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_DSS_Executive_Get_OptionValue ( void * ctx , int32_t i ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_DSS_Executive_Get_OptionValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Error_Get_Description ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Error_Get_Description'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Error_Get_Number ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Error_Get_Number'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t * ctx_Error_Get_NumberPtr ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Error_Get_NumberPtr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Fuses_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Fuses_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Fuses_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Fuses_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Fuses_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Fuses_Get_MonitoredObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Fuses_Get_MonitoredTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Fuses_Get_SwitchedObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_MonitoredObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Fuses_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_MonitoredTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Fuses_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_SwitchedObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Fuses_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Fuses_Get_SwitchedTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_SwitchedTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Fuses_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Fuses_Get_TCCcurve ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_TCCcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_TCCcurve ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Fuses_Set_TCCcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Fuses_Get_RatedCurrent ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_RatedCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_RatedCurrent ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Fuses_Set_RatedCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Fuses_Get_Delay ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Open ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Close ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_Delay ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Fuses_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % uint16_t ctx_Fuses_IsBlown ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_IsBlown'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Fuses_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Fuses_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Reset ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Fuses_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Get_State ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_State ( void * ctx , char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Fuses_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Get_NormalState ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Fuses_Set_NormalState ( void * ctx , char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Fuses_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Fuses_Get_NumPhases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Fuses_Get_NumPhases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Generators_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Get_RegisterNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Get_RegisterNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_RegisterNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Get_RegisterValues ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Get_RegisterValues_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Generators_Get_ForcedON ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_ForcedON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_ForcedON ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Generators_Set_ForcedON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Generators_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_kV ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_kvar ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_kW ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_PF ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_kV ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_kvar ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_kW ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_PF ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Phases ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Generators_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Generators_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_Model ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Model ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Generators_Set_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_kVArated ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_kVArated ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_Vmaxpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_Vminpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Vmaxpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Vminpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_Generators_Get_daily ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_daily ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Generators_Set_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Generators_Get_duty ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_duty ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Generators_Set_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Generators_Get_Yearly ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Yearly ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Generators_Set_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_Status ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Status ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Generators_Set_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % uint16_t ctx_Generators_Get_IsDelta ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_IsDelta ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Generators_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % double ctx_Generators_Get_kva ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_kva ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Generators_Set_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Generators_Get_Class_ ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Class_ ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Generators_Set_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Generators_Get_Bus1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Generators_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Generators_Set_Bus1 ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Generators_Set_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_GICSources_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_GICSources_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_GICSources_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_GICSources_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_GICSources_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_GICSources_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_Phases ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_GICSources_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_GICSources_Get_Bus1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_GICSources_Get_Bus2 ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_GICSources_Get_EN ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_EN'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_EN ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_GICSources_Set_EN'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_GICSources_Get_EE ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_EE'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_EE ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_GICSources_Set_EE'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_GICSources_Get_Lat1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Lat1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_Lat1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_GICSources_Set_Lat1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_GICSources_Get_Lat2 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Lat2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_Lat2 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_GICSources_Set_Lat2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_GICSources_Get_Lon1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Lon1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_Lon1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_GICSources_Set_Lon1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_GICSources_Get_Lon2 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Lon2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_Lon2 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_GICSources_Set_Lon2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_GICSources_Get_Volts ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_Volts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_Volts ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_GICSources_Set_Volts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_ISources_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_ISources_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_ISources_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_ISources_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_ISources_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_ISources_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ISources_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ISources_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_ISources_Get_Amps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_Amps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ISources_Set_Amps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_ISources_Set_Amps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_ISources_Get_AngleDeg ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_ISources_Get_Frequency ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ISources_Set_AngleDeg ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_ISources_Set_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_ISources_Set_Frequency ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_ISources_Set_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_LineCodes_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineCodes_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineCodes_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_LineCodes_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % uint16_t ctx_LineCodes_Get_IsZ1Z0 ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_IsZ1Z0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineCodes_Get_Units ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_Units ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineCodes_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LineCodes_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_Phases ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineCodes_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_R1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_R1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_X1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_X1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_R0 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_X0 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_R0 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_X0 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_C0 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_C1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_C0 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_C1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_Cmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_Cmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Cmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_Rmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_Rmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_Xmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_Xmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_Cmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineCodes_Set_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_Rmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineCodes_Set_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_Xmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineCodes_Set_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_NormAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_NormAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LineCodes_Get_EmergAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_EmergAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineCodes_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Lines_Get_Bus1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Lines_Get_Bus2 ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_Length ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Length'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Lines_Get_LineCode ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_LineCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Lines_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_R1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_X1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_New ( void * ctx , const char * Name ); 
    fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ctx_Lines_New'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Bus1 ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Lines_Set_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Bus2 ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Lines_Set_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Length ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_Length'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_LineCode ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Lines_Set_LineCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Lines_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Phases ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Lines_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_R1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_X1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_C0 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_C1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Cmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Cmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Cmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_R0 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Rmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Rmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_X0 ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Xmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Xmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_C0 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_C1 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Cmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Lines_Set_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_R0 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Rmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Lines_Set_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_X0 ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Xmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Lines_Set_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_EmergAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_NormAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_EmergAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_NormAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_Lines_Get_Geometry ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Geometry'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Geometry ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Lines_Set_Geometry'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_Rg ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Rg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_Rho ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Rho'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_Xg ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Xg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Rg ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_Rg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Rho ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_Rho'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Xg ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Lines_Set_Xg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Yprim ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Yprim'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Get_Yprim_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Yprim_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Yprim ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Lines_Set_Yprim'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_NumCust ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_NumCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_TotalCust ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_TotalCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_Parent ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Parent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Lines_Get_Spacing ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Spacing'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Spacing ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Lines_Set_Spacing'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_Units ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_Units ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Lines_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Lines_Get_SeasonRating ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_SeasonRating'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Lines_Get_IsSwitch ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_IsSwitch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_IsSwitch ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Lines_Set_IsSwitch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Loads_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Loads_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Loads_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_kV ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_kvar ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_kW ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_PF ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_kV ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_kvar ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_kW ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_PF ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_AllocationFactor ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_AllocationFactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_Cfactor ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Cfactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_Class_ ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_CVRcurve ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_CVRcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_CVRvars ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_CVRvars'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_CVRwatts ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_CVRwatts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_daily ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_duty ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_Growth ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Growth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Loads_Get_IsDelta ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_kva ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_kwh ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_kwh'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_kwhdays ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_kwhdays'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_Model ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_NumCust ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_NumCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_PctMean ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_PctMean'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_PctStdDev ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_PctStdDev'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_Rneut ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_Spectrum ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Spectrum'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_Status ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_Vmaxpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_Vminemerg ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Vminemerg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_Vminnorm ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Vminnorm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_Vminpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_xfkVA ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_xfkVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_Xneut ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_Yearly ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_AllocationFactor ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_AllocationFactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Cfactor ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_Cfactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Class_ ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Loads_Set_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_CVRcurve ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Loads_Set_CVRcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_CVRvars ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_CVRvars'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_CVRwatts ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_CVRwatts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_daily ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Loads_Set_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_duty ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Loads_Set_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Growth ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Loads_Set_Growth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_IsDelta ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Loads_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_kva ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_kwh ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_kwh'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_kwhdays ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_kwhdays'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Model ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Loads_Set_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_NumCust ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Loads_Set_NumCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_PctMean ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_PctMean'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_PctStdDev ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_PctStdDev'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Rneut ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Spectrum ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Loads_Set_Spectrum'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Status ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Loads_Set_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Vmaxpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Vminemerg ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_Vminemerg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Vminnorm ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_Vminnorm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Vminpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_xfkVA ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_xfkVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Xneut ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Yearly ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Loads_Set_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Loads_Get_ZIPV ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_ZIPV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Get_ZIPV_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_ZIPV_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_ZIPV ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Loads_Set_ZIPV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_pctSeriesRL ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_pctSeriesRL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_pctSeriesRL ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_pctSeriesRL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Loads_Get_RelWeight ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_RelWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_RelWeight ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Loads_Set_RelWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_Loads_Get_Sensor ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Sensor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_LoadShapes_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_LoadShapes_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LoadShapes_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LoadShapes_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LoadShapes_Get_Npts ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_Pmult ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Pmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_Pmult_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Pmult_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_Qmult ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Qmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_Qmult_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Qmult_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_Npts ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_Pmult ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_Pmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_Qmult ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_Qmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Normalize ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Normalize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_TimeArray ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_TimeArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Get_TimeArray_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_TimeArray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_TimeArray ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_TimeArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_LoadShapes_Get_HrInterval ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_HrInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_LoadShapes_Get_MinInterval ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_MinInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_LoadShapes_Get_SInterval ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_SInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_SInterval ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_SInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_HrInterval ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_HrInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_MinInterval ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_MinInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_LoadShapes_New ( void * ctx , const char * Name ); 
    fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ctx_LoadShapes_New'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_LoadShapes_Get_PBase ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_PBase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_LoadShapes_Get_Qbase ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_Qbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_PBase ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_PBase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_Qbase ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_Qbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % uint16_t ctx_LoadShapes_Get_UseActual ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_UseActual'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_UseActual ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_UseActual'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Meters_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_RegisterNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_RegisterNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_RegisterNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_RegisterValues ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_RegisterValues_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_ResetAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_ResetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Sample ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Sample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Save ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Save'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Meters_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_Totals ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_Totals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_Totals_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_Totals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_Peakcurrent ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_Peakcurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_Peakcurrent_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_Peakcurrent_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_Peakcurrent ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Meters_Set_Peakcurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_CalcCurrent ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_CalcCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_CalcCurrent_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_CalcCurrent_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_CalcCurrent ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Meters_Set_CalcCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllocFactors ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllocFactors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllocFactors_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllocFactors_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_AllocFactors ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Meters_Set_AllocFactors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Meters_Get_MeteredElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_MeteredTerminal ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_MeteredElement ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Meters_Set_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_MeteredTerminal ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Meters_Set_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % uint16_t ctx_Meters_Get_DIFilesAreOpen ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_DIFilesAreOpen'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_CloseAllDIFiles ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_CloseAllDIFiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_OpenAllDIFiles ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_OpenAllDIFiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_SampleAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_SampleAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_SaveAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_SaveAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllEndElements ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllEndElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllEndElements_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllEndElements_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_CountEndElements ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_CountEndElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllBranchesInZone ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllBranchesInZone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_AllBranchesInZone_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AllBranchesInZone_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_CountBranches ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_CountBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Meters_Get_SAIFI ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SAIFI'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_SequenceIndex ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SequenceIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_SequenceIndex ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Meters_Set_SequenceIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Meters_Get_SAIFIKW ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SAIFIKW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_DoReliabilityCalc ( void * ctx , uint16_t AssumeRestoration ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Meters_DoReliabilityCalc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_SeqListSize ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SeqListSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_TotalCustomers ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_TotalCustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Meters_Get_SAIDI ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SAIDI'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Meters_Get_CustInterrupts ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_CustInterrupts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_NumSections ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_NumSections'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_SetActiveSection ( void * ctx , int32_t SectIdx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Meters_SetActiveSection'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Meters_Get_AvgRepairTime ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_AvgRepairTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Meters_Get_FaultRateXRepairHrs ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_FaultRateXRepairHrs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_NumSectionBranches ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_NumSectionBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_NumSectionCustomers ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_NumSectionCustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_OCPDeviceType ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_OCPDeviceType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Meters_Get_SumBranchFltRates ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SumBranchFltRates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_SectSeqIdx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SectSeqIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_SectTotalCust ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_SectTotalCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Get_ZonePCE ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_ZonePCE'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Monitors_Get_FileName ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_FileName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_Mode ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Monitors_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_ResetAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_ResetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Sample ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Sample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Save ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Save'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Set_Mode ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Monitors_Set_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Show ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Show'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Monitors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_ByteStream ( void * ctx , int8_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_ByteStream'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int8PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_ByteStream_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_ByteStream_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_SampleCount ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_SampleCount'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_SampleAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_SampleAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_SaveAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_SaveAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Process ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Process'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_ProcessAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_ProcessAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_Channel ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Monitors_Get_Channel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_Channel_GR ( void * ctx , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Monitors_Get_Channel_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_dblFreq ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_dblFreq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_dblFreq_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_dblFreq_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_dblHour ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_dblHour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_dblHour_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_dblHour_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_FileVersion ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_FileVersion'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_Header ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Header'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Get_Header_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Header_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_NumChannels ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_NumChannels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_RecordSize ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_RecordSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Monitors_Get_Element ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Element'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Set_Element ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Monitors_Set_Element'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_Terminal ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_Terminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Set_Terminal ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Monitors_Set_Terminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Parallel_Get_NumCPUs ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_NumCPUs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Parallel_Get_NumCores ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_NumCores'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Parallel_Get_ActiveActor ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ActiveActor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Set_ActiveActor ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parallel_Set_ActiveActor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Parallel_CreateActor ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_CreateActor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Parallel_Get_ActorCPU ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ActorCPU'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Set_ActorCPU ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parallel_Set_ActorCPU'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Parallel_Get_NumOfActors ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_NumOfActors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Wait ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Wait'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Get_ActorProgress ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ActorProgress'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Get_ActorProgress_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ActorProgress_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Get_ActorStatus ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ActorStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Get_ActorStatus_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ActorStatus_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Parallel_Get_ActiveParallel ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ActiveParallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Set_ActiveParallel ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parallel_Set_ActiveParallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Parallel_Get_ConcatenateReports ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parallel_Get_ConcatenateReports'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parallel_Set_ConcatenateReports ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parallel_Set_ConcatenateReports'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Parser_Get_CmdString ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_CmdString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parser_Set_CmdString ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Parser_Set_CmdString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Parser_Get_NextParam ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_NextParam'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Parser_Get_AutoIncrement ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_AutoIncrement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parser_Set_AutoIncrement ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Parser_Set_AutoIncrement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % double ctx_Parser_Get_DblValue ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_DblValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Parser_Get_IntValue ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_IntValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Parser_Get_StrValue ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_StrValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Parser_Get_WhiteSpace ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_WhiteSpace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parser_Set_WhiteSpace ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Parser_Set_WhiteSpace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Parser_Get_BeginQuote ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_BeginQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Parser_Get_EndQuote ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_EndQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parser_Set_BeginQuote ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Parser_Set_BeginQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Parser_Set_EndQuote ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Parser_Set_EndQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Parser_Get_Delimiters ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_Get_Delimiters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parser_Set_Delimiters ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Parser_Set_Delimiters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Parser_ResetDelimiters ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Parser_ResetDelimiters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Parser_Get_Vector ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t ExpectedSize ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parser_Get_Vector'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Parser_Get_Vector_GR ( void * ctx , int32_t ExpectedSize ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parser_Get_Vector_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Parser_Get_Matrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parser_Get_Matrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Parser_Get_Matrix_GR ( void * ctx , int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parser_Get_Matrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Parser_Get_SymMatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parser_Get_SymMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Parser_Get_SymMatrix_GR ( void * ctx , int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Parser_Get_SymMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PDElements_Get_FaultRate ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_FaultRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_PDElements_Get_IsShunt ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_IsShunt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PDElements_Get_pctPermanent ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_pctPermanent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Set_FaultRate ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PDElements_Set_FaultRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Set_pctPermanent ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PDElements_Set_pctPermanent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_PDElements_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PDElements_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_PDElements_Get_AccumulatedL ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AccumulatedL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PDElements_Get_Lambda ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_Lambda'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_Numcustomers ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_Numcustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_ParentPDElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_ParentPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PDElements_Get_RepairTime ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_RepairTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_Totalcustomers ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_Totalcustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_FromTerminal ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_FromTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PDElements_Get_TotalMiles ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_TotalMiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PDElements_Get_SectionID ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_SectionID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Set_RepairTime ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PDElements_Set_RepairTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllMaxCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllMaxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllMaxCurrents_GR ( void * ctx , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllMaxCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllPctNorm ( void * ctx , double ** ResultPtr , int32_t * ResultCount , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllPctNorm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllPctNorm_GR ( void * ctx , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllPctNorm_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllPctEmerg ( void * ctx , double ** ResultPtr , int32_t * ResultCount , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllPctEmerg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllPctEmerg_GR ( void * ctx , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllPctEmerg_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllCurrents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllCurrentsMagAng ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllCurrentsMagAng'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllCurrentsMagAng_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllCurrentsMagAng_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllCplxSeqCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllCplxSeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllCplxSeqCurrents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllCplxSeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllSeqCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllSeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllSeqCurrents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllSeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllPowers ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllPowers_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllSeqPowers ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllSeqPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllSeqPowers_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllSeqPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNumPhases ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNumPhases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNumPhases_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNumPhases_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNumConductors ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNumConductors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNumConductors_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNumConductors_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNumTerminals ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNumTerminals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PDElements_Get_AllNumTerminals_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PDElements_Get_AllNumTerminals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Get_RegisterNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Get_RegisterNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_RegisterNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Get_RegisterValues ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Get_RegisterValues_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PVSystems_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PVSystems_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PVSystems_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_PVSystems_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_PVSystems_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_PVSystems_Get_Irradiance ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Irradiance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_Irradiance ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_Irradiance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_PVSystems_Get_kvar ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PVSystems_Get_kVArated ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PVSystems_Get_kW ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_PVSystems_Get_PF ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_kVArated ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_PF ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_kvar ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_daily ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_daily ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_duty ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_duty ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_yearly ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_yearly ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_Tdaily ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Tdaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_Tdaily ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_Tdaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_Tduty ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Tduty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_Tduty ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_Tduty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_Tyearly ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Tyearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_Tyearly ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_Tyearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_PVSystems_Get_Pmpp ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Pmpp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_PVSystems_Set_Pmpp ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_PVSystems_Set_Pmpp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_PVSystems_Get_IrradianceNow ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_IrradianceNow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_PVSystems_Get_Sensor ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_PVSystems_Get_Sensor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Reclosers_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reclosers_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_MonitoredTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_MonitoredTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reclosers_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Reclosers_Get_SwitchedObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_SwitchedObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reclosers_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Reclosers_Get_MonitoredObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_SwitchedTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_MonitoredObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reclosers_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_SwitchedTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reclosers_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_NumFast ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_NumFast'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Get_RecloseIntervals ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_RecloseIntervals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Get_RecloseIntervals_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_RecloseIntervals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_Shots ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_Shots'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_NumFast ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reclosers_Set_NumFast'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_Shots ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reclosers_Set_Shots'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Reclosers_Get_PhaseTrip ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_PhaseTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_PhaseTrip ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reclosers_Set_PhaseTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Reclosers_Get_GroundInst ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_GroundInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Reclosers_Get_GroundTrip ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_GroundTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Reclosers_Get_PhaseInst ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_PhaseInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_GroundInst ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reclosers_Set_GroundInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_GroundTrip ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reclosers_Set_GroundTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_PhaseInst ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reclosers_Set_PhaseInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Close ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Open ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reclosers_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_State ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_State ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reclosers_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Reclosers_Get_NormalState ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reclosers_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reclosers_Set_NormalState ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reclosers_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_CTPrimary ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_CTPrimary'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_Delay ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ForwardBand ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ForwardBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ForwardR ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ForwardR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ForwardVreg ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ForwardVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ForwardX ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ForwardX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_RegControls_Get_IsInverseTime ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_IsInverseTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_RegControls_Get_IsReversible ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_IsReversible'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_MaxTapChange ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_MaxTapChange'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_RegControls_Get_MonitoredBus ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_MonitoredBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_RegControls_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_PTratio ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ReverseBand ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ReverseBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ReverseR ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ReverseR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ReverseVreg ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ReverseVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_ReverseX ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_ReverseX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_TapDelay ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_TapDelay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_TapWinding ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_TapWinding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_RegControls_Get_Transformer ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_Transformer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_RegControls_Get_VoltageLimit ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_VoltageLimit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_Winding ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_Winding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_TapNumber ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_TapNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_CTPrimary ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_CTPrimary'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_Delay ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ForwardBand ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ForwardBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ForwardR ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ForwardR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ForwardVreg ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ForwardVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ForwardX ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ForwardX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_IsInverseTime ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_RegControls_Set_IsInverseTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_IsReversible ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_RegControls_Set_IsReversible'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_MaxTapChange ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_RegControls_Set_MaxTapChange'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_MonitoredBus ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_RegControls_Set_MonitoredBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_RegControls_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_PTratio ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ReverseBand ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ReverseBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ReverseR ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ReverseR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ReverseVreg ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ReverseVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_ReverseX ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_ReverseX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_TapDelay ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_TapDelay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_TapWinding ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_RegControls_Set_TapWinding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_Transformer ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_RegControls_Set_Transformer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_VoltageLimit ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_RegControls_Set_VoltageLimit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_Winding ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_RegControls_Set_Winding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_TapNumber ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_RegControls_Set_TapNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Relays_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Relays_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Relays_Get_MonitoredObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_MonitoredObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Relays_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_MonitoredTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Relays_Get_SwitchedObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_MonitoredTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Relays_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_SwitchedObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Relays_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_SwitchedTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_SwitchedTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Relays_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Relays_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Relays_Open ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Close ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_State ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_State ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Relays_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Relays_Get_NormalState ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Relays_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Relays_Set_NormalState ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Relays_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Sensors_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_Currents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_Currents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_Currents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_Currents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Sensors_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Sensors_Get_IsDelta ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_kVARS ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_kVARS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_kVARS_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_kVARS_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_kVS ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_kVS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_kVS_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_kVS_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_kWS ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_kWS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_kWS_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_kWS_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Sensors_Get_MeteredElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Sensors_Get_MeteredTerminal ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Sensors_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Sensors_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Sensors_Get_PctError ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_PctError'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Sensors_Get_ReverseDelta ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_ReverseDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Sensors_Get_Weight ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_Weight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_ResetAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_ResetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_Currents ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_Currents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_IsDelta ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_kVARS ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_kVARS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_kVS ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_kVS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_kWS ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_kWS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_MeteredElement ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Sensors_Set_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_MeteredTerminal ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Sensors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_PctError ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Sensors_Set_PctError'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_ReverseDelta ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_ReverseDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_Weight ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Sensors_Set_Weight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Sensors_Get_kVbase ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_kVbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_kVbase ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Sensors_Set_kVbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_AllocationFactor ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_AllocationFactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Get_AllocationFactor_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_AllocationFactor_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Settings_Get_AllowDuplicates ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_AllowDuplicates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Settings_Get_AutoBusList ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_AutoBusList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Settings_Get_CktModel ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_CktModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_CktModel ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Settings_Set_CktModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Settings_Get_EmergVmaxpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_EmergVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Settings_Get_EmergVminpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_EmergVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Settings_Get_NormVmaxpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_NormVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Settings_Get_NormVminpu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_NormVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Settings_Get_ZoneLock ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_ZoneLock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_AllocationFactors ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_AllocationFactors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_AllowDuplicates ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Settings_Set_AllowDuplicates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_AutoBusList ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Settings_Set_AutoBusList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_EmergVmaxpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_EmergVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_EmergVminpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_EmergVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_NormVmaxpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_NormVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_NormVminpu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_NormVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_ZoneLock ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Settings_Set_ZoneLock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Settings_Get_LossRegs ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_LossRegs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Get_LossRegs_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_LossRegs_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Settings_Get_LossWeight ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_LossWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Settings_Get_Trapezoidal ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_Trapezoidal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Get_UEregs ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_UEregs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Get_UEregs_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_UEregs_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Settings_Get_UEweight ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_UEweight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_LossRegs ( void * ctx , int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Settings_Set_LossRegs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_LossWeight ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_LossWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_Trapezoidal ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Settings_Set_Trapezoidal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_UEregs ( void * ctx , int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Settings_Set_UEregs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_UEweight ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_UEweight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % uint16_t ctx_Settings_Get_ControlTrace ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_ControlTrace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Get_VoltageBases ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_VoltageBases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Get_VoltageBases_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_VoltageBases_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_ControlTrace ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Settings_Set_ControlTrace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_VoltageBases ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Settings_Set_VoltageBases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Settings_Get_PriceCurve ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_PriceCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Settings_Get_PriceSignal ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_PriceSignal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_PriceCurve ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Settings_Set_PriceCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_PriceSignal ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Settings_Set_PriceSignal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % uint16_t ctx_Settings_Get_LoadsTerminalCheck ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_LoadsTerminalCheck'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_LoadsTerminalCheck ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Settings_Set_LoadsTerminalCheck'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % int32_t ctx_Settings_Get_IterateDisabled ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Settings_Get_IterateDisabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Settings_Set_IterateDisabled ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Settings_Set_IterateDisabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_Frequency ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Hour ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Hour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Iterations ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Iterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_LoadMult ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_LoadMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_MaxIterations ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_MaxIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Mode ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Number ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Number'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Random ( void * ctx , int32_t Random ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_Random'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Random ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Random'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_Seconds ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Seconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_StepSize ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_StepSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_Tolerance ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Tolerance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Year ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Year'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Frequency ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Hour ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_Hour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_LoadMult ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_LoadMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_MaxIterations ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_MaxIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Mode ( void * ctx , int32_t Mode ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Number ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_Number'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Seconds ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_Seconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_StepSize ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_StepSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Tolerance ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_Tolerance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Year ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_Year'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_Solve ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Solve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Solution_Get_ModeID ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_ModeID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_LoadModel ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_LoadModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_LoadModel ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_LoadModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Solution_Get_LDCurve ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_LDCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_LDCurve ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Solution_Set_LDCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_pctGrowth ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_pctGrowth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_pctGrowth ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_pctGrowth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_AddType ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_AddType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_AddType ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_AddType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_GenkW ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_GenkW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_GenkW ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_GenkW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_GenPF ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_GenPF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_GenPF ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_GenPF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_Capkvar ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Capkvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Capkvar ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_Capkvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Algorithm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Algorithm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Algorithm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_Algorithm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_ControlMode ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_ControlMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_ControlMode ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_ControlMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_GenMult ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_GenMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_GenMult ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_GenMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_Solution_Get_DefaultDaily ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_DefaultDaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Solution_Get_DefaultYearly ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_DefaultYearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_DefaultDaily ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Solution_Set_DefaultDaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_DefaultYearly ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Solution_Set_DefaultYearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_EventLog ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_EventLog'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_EventLog_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_EventLog_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_dblHour ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_dblHour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_dblHour ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_dblHour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_StepsizeHr ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_StepsizeHr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_StepsizeMin ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_StepsizeMin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_ControlIterations ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_ControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_MaxControlIterations ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_MaxControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Sample_DoControlActions ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Sample_DoControlActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_ControlIterations ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_ControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_MaxControlIterations ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_MaxControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_CheckFaultStatus ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_CheckFaultStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_SolveDirect ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_SolveDirect'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_SolveNoControl ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_SolveNoControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_SolvePflow ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_SolvePflow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_SolvePlusControl ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_SolvePlusControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_SolveSnap ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_SolveSnap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_CheckControls ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_CheckControls'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_InitSnap ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_InitSnap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Solution_Get_SystemYChanged ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_SystemYChanged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_BuildYMatrix ( void * ctx , int32_t BuildOption , int32_t AllocateVI ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='ctx_Solution_BuildYMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_DoControlActions ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_DoControlActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_SampleControlDevices ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_SampleControlDevices'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Solution_Get_Converged ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Converged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Converged ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Solution_Set_Converged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_Totaliterations ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Totaliterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_MostIterationsDone ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_MostIterationsDone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Solution_Get_ControlActionsDone ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_ControlActionsDone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_ControlActionsDone ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Solution_Set_ControlActionsDone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Solution_Cleanup ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Cleanup'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_FinishTimeStep ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_FinishTimeStep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_Process_Time ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Process_Time'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_Total_Time ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Total_Time'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_Total_Time ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_Total_Time'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_Time_of_Step ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Time_of_Step'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Solution_Get_IntervalHrs ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_IntervalHrs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_IntervalHrs ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Solution_Set_IntervalHrs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Solution_Get_MinIterations ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_MinIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Set_MinIterations ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Solution_Set_MinIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Solution_SolveAll ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_SolveAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_IncMatrix ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_IncMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_IncMatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_IncMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_Laplacian ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Laplacian'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_Laplacian_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_Laplacian_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_BusLevels ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_BusLevels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_BusLevels_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_BusLevels_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_IncMatrixRows ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_IncMatrixRows'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_IncMatrixRows_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_IncMatrixRows_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_IncMatrixCols ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_IncMatrixCols'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Solution_Get_IncMatrixCols_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Solution_Get_IncMatrixCols_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_Action ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_Action'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_SwtControls_Get_Delay ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_SwtControls_Get_IsLocked ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_IsLocked'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_SwtControls_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_SwtControls_Get_SwitchedObj ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_SwitchedTerm ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_Action ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_SwtControls_Set_Action'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_Delay ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_SwtControls_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_IsLocked ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_SwtControls_Set_IsLocked'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_SwtControls_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_SwitchedObj ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_SwtControls_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_SwitchedTerm ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_SwtControls_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_NormalState ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_NormalState ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_SwtControls_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_State ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_State ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_SwtControls_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Reset ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Text_Get_Command ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Text_Get_Command'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Text_Set_Command ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Text_Set_Command'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Text_Get_Result ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Text_Get_Result'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_NumLoops ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_NumLoops'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_ActiveBranch ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_ActiveBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Topology_Get_AllIsolatedBranches ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_AllIsolatedBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Topology_Get_AllIsolatedBranches_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_AllIsolatedBranches_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Topology_Get_AllLoopedPairs ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_AllLoopedPairs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Topology_Get_AllLoopedPairs_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_AllLoopedPairs_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_BackwardBranch ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_BackwardBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Topology_Get_BranchName ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_BranchName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_ForwardBranch ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_ForwardBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_LoopedBranch ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_LoopedBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_NumIsolatedBranches ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_NumIsolatedBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_ParallelBranch ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_ParallelBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Topology_Set_BranchName ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Topology_Set_BranchName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Topology_Get_AllIsolatedLoads ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_AllIsolatedLoads'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Topology_Get_AllIsolatedLoads_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_AllIsolatedLoads_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_FirstLoad ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_FirstLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_NextLoad ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_NextLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_NumIsolatedLoads ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_NumIsolatedLoads'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Topology_Get_ActiveLevel ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_ActiveLevel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Topology_Get_BusName ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Topology_Get_BusName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Topology_Set_BusName ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Topology_Set_BusName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Transformers_Get_IsDelta ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_kV ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_kVA ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_kVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_MaxTap ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_MaxTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_MinTap ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_MinTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Transformers_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_NumTaps ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_NumTaps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_NumWindings ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_NumWindings'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_R ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_Rneut ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_Tap ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Tap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_Wdg ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Wdg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Transformers_Get_XfmrCode ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_XfmrCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_Xhl ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Xhl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_Xht ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Xht'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_Xlt ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Xlt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_Xneut ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_IsDelta ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Transformers_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_kV ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_kVA ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_kVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_MaxTap ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_MaxTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_MinTap ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_MinTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Transformers_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_NumTaps ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Transformers_Set_NumTaps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_NumWindings ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Transformers_Set_NumWindings'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_R ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Rneut ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Tap ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_Tap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Wdg ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Transformers_Set_Wdg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_XfmrCode ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Transformers_Set_XfmrCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Xhl ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_Xhl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Xht ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_Xht'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Xlt ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_Xlt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_Xneut ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_WdgVoltages ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_WdgVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_WdgVoltages_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_WdgVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_WdgCurrents ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_WdgCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_WdgCurrents_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_WdgCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Transformers_Get_strWdgCurrents ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_strWdgCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_CoreType ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_CoreType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_CoreType ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Transformers_Set_CoreType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_Transformers_Get_RdcOhms ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_RdcOhms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_RdcOhms ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Transformers_Set_RdcOhms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_LossesByType ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_LossesByType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_LossesByType_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_LossesByType_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_AllLossesByType ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_AllLossesByType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Get_AllLossesByType_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_AllLossesByType_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Vsources_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Vsources_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Vsources_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Vsources_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Vsources_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Vsources_Get_BasekV ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_BasekV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Vsources_Get_pu ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_pu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Set_BasekV ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Vsources_Set_BasekV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Set_pu ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Vsources_Set_pu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Vsources_Get_AngleDeg ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Vsources_Get_Frequency ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Vsources_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Set_AngleDeg ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Vsources_Set_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Set_Frequency ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Vsources_Set_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Set_Phases ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Vsources_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_XYCurves_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_XYCurves_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_XYCurves_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_XYCurves_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_XYCurves_Get_Npts ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Get_Xarray ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Xarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Get_Xarray_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Xarray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Npts ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Xarray ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Xarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_XYCurves_Get_x ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_XYCurves_Get_y ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Get_Yarray ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Yarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Get_Yarray_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Yarray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_x ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_XYCurves_Set_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_y ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_XYCurves_Set_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Yarray ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Yarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_XYCurves_Get_Xscale ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Xscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_XYCurves_Get_Xshift ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Xshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_XYCurves_Get_Yscale ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Yscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_XYCurves_Get_Yshift ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_Yshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Xscale ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Xscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Xshift ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Xshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Yscale ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Yscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_Yshift ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_XYCurves_Set_Yshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_GetCompressedYMatrix ( void * ctx , uint16_t factor , uint32_t * nBus , uint32_t * nNz , int32_t ** ColPtr , int32_t ** RowIdxPtr , double ** cValsPtr ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_GetCompressedYMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'uint32Ptr', 'uint32Ptr', 'int32PtrPtr', 'int32PtrPtr', 'doublePtrPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_ZeroInjCurr ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_ZeroInjCurr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_GetSourceInjCurrents ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_GetSourceInjCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_GetPCInjCurr ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_GetPCInjCurr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_BuildYMatrixD ( void * ctx , int32_t BuildOps , int32_t AllocateVI ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='ctx_YMatrix_BuildYMatrixD'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_AddInAuxCurrents ( void * ctx , int32_t SType ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_YMatrix_AddInAuxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_getIpointer ( void * ctx , double ** IvectorPtr ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_getIpointer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_getVpointer ( void * ctx , double ** VvectorPtr ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_getVpointer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_YMatrix_SolveSystem ( void * ctx , double * NodeVPtr ); 
    fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_SolveSystem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_Set_SystemYChanged ( void * ctx , uint16_t arg ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_YMatrix_Set_SystemYChanged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_YMatrix_Get_SystemYChanged ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_Get_SystemYChanged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_Set_UseAuxCurrents ( void * ctx , uint16_t arg ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_YMatrix_Set_UseAuxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_YMatrix_Get_UseAuxCurrents ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_Get_UseAuxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_ReduceCkt_Get_Zmag ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Get_Zmag'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_Set_Zmag ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Set_Zmag'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % uint16_t ctx_ReduceCkt_Get_KeepLoad ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Get_KeepLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_Set_KeepLoad ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_ReduceCkt_Set_KeepLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % char * ctx_ReduceCkt_Get_EditString ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Get_EditString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_Set_EditString ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Set_EditString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_ReduceCkt_Get_StartPDElement ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Get_StartPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_Set_StartPDElement ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Set_StartPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_ReduceCkt_Get_EnergyMeter ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Get_EnergyMeter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_Set_EnergyMeter ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Set_EnergyMeter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_SaveCircuit ( void * ctx , const char * CktName ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ReduceCkt_SaveCircuit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_DoDefault ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_DoDefault'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_DoShortLines ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_DoShortLines'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_DoDangling ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_DoDangling'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_DoLoopBreak ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_DoLoopBreak'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_DoParallelLines ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_DoParallelLines'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_DoSwitches ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_DoSwitches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_Do1phLaterals ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_Do1phLaterals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ReduceCkt_DoBranchRemove ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ReduceCkt_DoBranchRemove'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Storages_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % int32_t ctx_Storages_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Storages_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Storages_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Storages_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Storages_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Storages_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * ctx_Storages_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Storages_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Storages_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Storages_Get_RegisterNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Storages_Get_RegisterValues ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Storages_Get_RegisterValues_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Storages_Get_puSOC ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_puSOC'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Storages_Set_puSOC ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Storages_Set_puSOC'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Storages_Get_State ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Storages_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Storages_Set_State ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Storages_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_CNData_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_CNData_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_CNData_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_Rdc ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_Rdc ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_Rac ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_Rac ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_GMRac ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_GMRac ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_GMRUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_GMRUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CNData_Set_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_Radius ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_Radius ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_RadiusUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_RadiusUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CNData_Set_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_ResistanceUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_ResistanceUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CNData_Set_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_Diameter ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_Diameter ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_NormAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_NormAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_EmergAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_EmergAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_EpsR ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_EpsR ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_InsLayer ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_InsLayer ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_DiaIns ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_DiaIns ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_DiaCable ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_DiaCable ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_k ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_k'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_k ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CNData_Set_k'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_DiaStrand ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_DiaStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_DiaStrand ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_DiaStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_GmrStrand ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_GmrStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_GmrStrand ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_GmrStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_CNData_Get_RStrand ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_RStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_RStrand ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_CNData_Set_RStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_LineGeometries_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineGeometries_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineGeometries_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_LineGeometries_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_LineGeometries_Get_Nconds ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_Nconds ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LineGeometries_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_Phases ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Cmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Cmatrix_GR ( void * ctx , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Cmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Rmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Rmatrix_GR ( void * ctx , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Xmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Xmatrix_GR ( void * ctx , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Zmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Zmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Zmatrix_GR ( void * ctx , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Zmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Units ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Units_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Units_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_Units ( void * ctx , int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Xcoords ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Xcoords_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Xcoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_Xcoords ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Ycoords ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Ycoords_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Ycoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_Ycoords ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Conductors ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Conductors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_Conductors_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Conductors_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_LineGeometries_Get_Reduce ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_Reduce'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_Reduce ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_Reduce'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % double ctx_LineGeometries_Get_RhoEarth ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_RhoEarth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_RhoEarth ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_RhoEarth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LineGeometries_Get_NormAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_NormAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LineGeometries_Get_EmergAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_EmergAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineSpacings_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineSpacings_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_LineSpacings_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_LineSpacings_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_LineSpacings_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_LineSpacings_Get_Nconds ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Set_Nconds ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineSpacings_Set_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LineSpacings_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Set_Phases ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineSpacings_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LineSpacings_Get_Units ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Set_Units ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineSpacings_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Get_Xcoords ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Get_Xcoords_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Xcoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Set_Xcoords ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineSpacings_Set_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Get_Ycoords ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Get_Ycoords_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_Ycoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Set_Ycoords ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineSpacings_Set_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Loads_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Loads_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Loads_Set_Phases ( void * ctx , int32_t Integer ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Loads_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Reactors_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reactors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % int32_t ctx_Reactors_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reactors_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_Reactors_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_Reactors_Get_kV ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_kV ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reactors_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Reactors_Get_kvar ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_kvar ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reactors_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Reactors_Get_Phases ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Phases ( void * ctx , int32_t Integer ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % uint16_t ctx_Reactors_Get_IsDelta ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_IsDelta ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_Reactors_Get_Parallel ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Parallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Parallel ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Parallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % double ctx_Reactors_Get_LmH ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_LmH'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_LmH ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reactors_Set_LmH'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_Reactors_Get_Bus1 ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_Reactors_Get_Bus2 ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Bus1 ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reactors_Set_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Bus2 ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reactors_Set_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % double ctx_Reactors_Get_R ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_R ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reactors_Set_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Reactors_Get_X ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_X'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_X ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reactors_Set_X'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_Reactors_Get_Rp ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Rp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Rp ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_Reactors_Set_Rp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % char * ctx_Reactors_Get_RCurve ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_RCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_RCurve ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reactors_Set_RCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % char * ctx_Reactors_Get_LCurve ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_LCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_LCurve ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Reactors_Set_LCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Rmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Rmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Rmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Xmatrix ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Xmatrix_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Xmatrix ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Z ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Z'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z1 ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z1_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z1_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Z1 ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Z1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z2 ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z2_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z2_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Z2 ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Z2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z0 ( void * ctx , double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Get_Z0_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_Z0_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_Z0 ( void * ctx , double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_Z0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Reactors_Get_SpecType ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_SpecType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_TSData_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_TSData_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_TSData_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_TSData_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_TSData_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_TSData_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_Rdc ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_Rdc ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_Rac ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_Rac ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_GMRac ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_GMRac ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_TSData_Get_GMRUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_GMRUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_TSData_Set_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_Radius ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_Radius ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_TSData_Get_RadiusUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_RadiusUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_TSData_Set_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_TSData_Get_ResistanceUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_ResistanceUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_TSData_Set_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_Diameter ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_Diameter ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_NormAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_NormAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_EmergAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_EmergAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_EpsR ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_EpsR ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_InsLayer ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_InsLayer ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_DiaIns ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_DiaIns ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_DiaCable ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_DiaCable ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_DiaShield ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_DiaShield'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_DiaShield ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_DiaShield'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_TapeLayer ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_TapeLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_TapeLayer ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_TapeLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_TSData_Get_TapeLap ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_TapeLap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_TapeLap ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_TSData_Set_TapeLap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_WireData_Get_Count ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_WireData_Get_First ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t ctx_WireData_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * ctx_WireData_Get_Name ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_Name ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_WireData_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_WireData_Get_AllNames ( void * ctx , char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Get_AllNames_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_Rdc ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_Rdc ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_Rac ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_Rac ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_GMRac ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_GMRac ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_WireData_Get_GMRUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_GMRUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_WireData_Set_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_Radius ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_Radius ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_WireData_Get_RadiusUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_RadiusUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_WireData_Set_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_WireData_Get_ResistanceUnits ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_ResistanceUnits ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_WireData_Set_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_Diameter ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_Diameter ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_NormAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_NormAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_EmergAmps ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_EmergAmps ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_WireData_Get_CapRadius ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_CapRadius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_CapRadius ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_WireData_Set_CapRadius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % int32_t ctx_Bus_Get_Next ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Bus_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_Error_Get_EarlyAbort ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Error_Get_EarlyAbort'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Error_Set_EarlyAbort ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Error_Set_EarlyAbort'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_Error_Get_ExtendedErrors ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_Error_Get_ExtendedErrors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Error_Set_ExtendedErrors ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_Error_Set_ExtendedErrors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % int32_t ctx_CNData_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CNData_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CNData_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CNData_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_CapControls_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_CapControls_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CapControls_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_CapControls_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Capacitors_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Capacitors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Capacitors_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Capacitors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_GICSources_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_GICSources_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_GICSources_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_GICSources_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_ISources_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_ISources_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_ISources_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_ISources_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LineCodes_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineCodes_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineCodes_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineCodes_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LineGeometries_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineGeometries_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineGeometries_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineGeometries_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LineSpacings_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LineSpacings_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LineSpacings_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LineSpacings_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Lines_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Lines_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Lines_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Lines_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_LoadShapes_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Meters_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Meters_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Meters_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Meters_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Monitors_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Monitors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Monitors_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Monitors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Reactors_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Reactors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Reactors_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Reactors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_RegControls_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_RegControls_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_RegControls_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_RegControls_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Sensors_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Sensors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Sensors_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Sensors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_SwtControls_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_SwtControls_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_SwtControls_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_SwtControls_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_TSData_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_TSData_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_TSData_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_TSData_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Transformers_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Transformers_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Transformers_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Transformers_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_Vsources_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_Vsources_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Vsources_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Vsources_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_WireData_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_WireData_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_WireData_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_WireData_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t ctx_XYCurves_Get_idx ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_XYCurves_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_XYCurves_Set_idx ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_XYCurves_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_ElementLosses ( void * ctx , double ** ResultPtr , int32_t * ResultCount , int32_t * ElementsPtr , int32_t ElementsCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_ElementLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtrPtr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_Circuit_Get_ElementLosses_GR ( void * ctx , int32_t * ElementsPtr , int32_t ElementsCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Circuit_Get_ElementLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_Points ( void * ctx , int32_t Npts , void * HoursPtr , void * PMultPtr , void * QMultPtr , uint16_t ExternalMemory , uint16_t IsFloat32 , int32_t Stride ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrvoidPtrvoidPtruint16uint16int32Thunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_Points'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'voidPtr', 'voidPtr', 'uint16', 'uint16', 'int32'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_UseFloat32 ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_UseFloat32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_UseFloat64 ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_UseFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_MaxP ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_MaxP'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LoadShapes_Get_MaxP ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_MaxP'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_LoadShapes_Set_MaxQ ( void * ctx , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrdoubleThunk';fcns.name{fcnNum}='ctx_LoadShapes_Set_MaxQ'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'double'};fcnNum=fcnNum+1;
    % double ctx_LoadShapes_Get_MaxQ ( void * ctx ); 
    fcns.thunkname{fcnNum}='doublevoidPtrThunk';fcns.name{fcnNum}='ctx_LoadShapes_Get_MaxQ'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_NodeRef ( void * ctx , int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NodeRef'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ctx_CktElement_Get_NodeRef_GR ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_CktElement_Get_NodeRef_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_YMatrix_CheckConvergence ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_CheckConvergence'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_SetGeneratordQdV ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_SetGeneratordQdV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % uint16_t ctx_YMatrix_Get_LoadsNeedUpdating ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_Get_LoadsNeedUpdating'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_Set_LoadsNeedUpdating ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_YMatrix_Set_LoadsNeedUpdating'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % uint16_t ctx_YMatrix_Get_SolutionInitialized ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_Get_SolutionInitialized'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_Set_SolutionInitialized ( void * ctx , uint16_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='ctx_YMatrix_Set_SolutionInitialized'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % int32_t ctx_YMatrix_Get_Iteration ( void * ctx ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_Get_Iteration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_Set_Iteration ( void * ctx , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_YMatrix_Set_Iteration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void * ctx_YMatrix_Get_Handle ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_Get_Handle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_YMatrix_Set_SolverOptions ( void * ctx , uint64_t opts ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint64Thunk';fcns.name{fcnNum}='ctx_YMatrix_Set_SolverOptions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
    % uint64_t ctx_YMatrix_Get_SolverOptions ( void * ctx ); 
    fcns.thunkname{fcnNum}='uint64voidPtrThunk';fcns.name{fcnNum}='ctx_YMatrix_Get_SolverOptions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void ctx_Text_CommandBlock ( void * ctx , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_Text_CommandBlock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_Text_CommandArray ( void * ctx , char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ctx_Text_CommandArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void ctx_ZIP_Open ( void * ctx , const char * FileName ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ZIP_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ZIP_Redirect ( void * ctx , const char * FileInZip ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ZIP_Redirect'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % uint16_t ctx_ZIP_Contains ( void * ctx , const char * Name ); 
    fcns.thunkname{fcnNum}='uint16voidPtrcstringThunk';fcns.name{fcnNum}='ctx_ZIP_Contains'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ZIP_List ( void * ctx , char *** ResultPtr , int32_t * ResultCount , const char * RegExp ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ZIP_List'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ZIP_Extract ( void * ctx , int8_t ** ResultPtr , int32_t * ResultCount , const char * FileName ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ZIP_Extract'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int8PtrPtr', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ZIP_Extract_GR ( void * ctx , const char * FileName ); 
    fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='ctx_ZIP_Extract_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
    % void ctx_ZIP_Close ( void * ctx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ctx_ZIP_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    enuminfo.CapControlModes=struct('CapControlModes_Current',0,'CapControlModes_Voltage',1,'CapControlModes_KVAR',2,'CapControlModes_Time',3,'CapControlModes_PF',4);
    enuminfo.LoadModels=struct('LoadModels_ConstPQ',1,'LoadModels_ConstZ',2,'LoadModels_Motor',3,'LoadModels_CVR',4,'LoadModels_ConstI',5,'LoadModels_ConstPFixedQ',6,'LoadModels_ConstPFixedX',7,'LoadModels_ZIPV',8);
    enuminfo.RandomModes=struct('RandomModes_Gaussian',1,'RandomModes_Uniform',2,'RandomModes_LogNormal',3);
    enuminfo.CktModels=struct('CktModels_Multiphase',0,'CktModels_PositiveSeq',1);
    enuminfo.ActionCodes=struct('ActionCodes_none',0,'ActionCodes_Open',1,'ActionCodes_Close',2,'ActionCodes_Reset',3,'ActionCodes_Lock',4,'ActionCodes_Unlock',5,'ActionCodes_TapUp',6,'ActionCodes_TapDown',7);
    enuminfo.BatchOperation=struct('BatchOperation_Set',0,'BatchOperation_Multiply',1,'BatchOperation_Increment',2);
    enuminfo.DSSJSONFlags=struct('DSSJSONFlags_Full',1,'DSSJSONFlags_SkipRedundant',2,'DSSJSONFlags_EnumAsInt',4,'DSSJSONFlags_FullNames',8,'DSSJSONFlags_Pretty',16,'DSSJSONFlags_ExcludeDisabled',32,'DSSJSONFlags_State',64,'DSSJSONFlags_Debug',128);
    enuminfo.StorageStates=struct('StorageStates_Charging',-1,'StorageStates_Idling',0,'StorageStates_Discharging',1);
    enuminfo.SolutionLoadModels=struct('SolutionLoadModels_PowerFlow',1,'SolutionLoadModels_Admittance',2);
    enuminfo.SolutionAlgorithms=struct('SolutionAlgorithms_NormalSolve',0,'SolutionAlgorithms_NewtonSolve',1);
    enuminfo.YMatrixModes=struct('YMatrixModes_SeriesOnly',1,'YMatrixModes_WholeMatrix',2);
    enuminfo.AutoAddTypes=struct('AutoAddTypes_AddGen',1,'AutoAddTypes_AddCap',2);
    enuminfo.SolveModes=struct('SolveModes_SnapShot',0,'SolveModes_Daily',1,'SolveModes_Yearly',2,'SolveModes_Monte1',3,'SolveModes_LD1',4,'SolveModes_PeakDay',5,'SolveModes_DutyCycle',6,'SolveModes_Direct',7,'SolveModes_MonteFault',8,'SolveModes_FaultStudy',9,'SolveModes_Monte2',10,'SolveModes_Monte3',11,'SolveModes_LD2',12,'SolveModes_AutoAdd',13,'SolveModes_Dynamic',14,'SolveModes_Harmonic',15);
    enuminfo.SolverOptions=struct('SolverOptions_ReuseNothing',0,'SolverOptions_ReuseCompressedMatrix',1,'SolverOptions_ReuseSymbolicFactorization',2,'SolverOptions_ReuseNumericFactorization',3,'SolverOptions_AlwaysResetYPrimInvalid',268435456);
    enuminfo.LoadStatus=struct('LoadStatus_Variable',0,'LoadStatus_Fixed',1,'LoadStatus_Exempt',2);
    enuminfo.ControlModes=struct('ControlModes_Static',0,'ControlModes_Event',1,'ControlModes_Time',2,'ControlModes_Multirate',3,'ControlModes_ControlOff',-1);
    enuminfo.LineUnits=struct('LineUnits_none',0,'LineUnits_Miles',1,'LineUnits_kFt',2,'LineUnits_km',3,'LineUnits_meter',4,'LineUnits_ft',5,'LineUnits_inch',6,'LineUnits_cm',7,'LineUnits_mm',8,'LineUnits_Maxnum',9);
    enuminfo.MonitorModes=struct('MonitorModes_VI',0,'MonitorModes_Power',1,'MonitorModes_Taps',2,'MonitorModes_States',3,'MonitorModes_Sequence',16,'MonitorModes_Magnitude',32,'MonitorModes_PosOnly',64);
    enuminfo.GeneratorStatus=struct('GeneratorStatus_Variable',0,'GeneratorStatus_Fixed',1);
    enuminfo.DSSMessageType=struct('DSSMessageType_Error',-1,'DSSMessageType_General',0,'DSSMessageType_Info',1,'DSSMessageType_Help',2,'DSSMessageType_Progress',3,'DSSMessageType_ProgressCaption',4,'DSSMessageType_ProgressFormCaption',5,'DSSMessageType_ProgressPercent',6,'DSSMessageType_FireOffEditor',7);
    methodinfo=fcns;