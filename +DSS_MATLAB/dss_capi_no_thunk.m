function [methodinfo,structs,enuminfo,ThunkLibName]=dss_capi_no_thunk
    %DSS_CAPI Create structures to define interfaces found in 'dss_capi'.
    
    % This file is a slightly modified version of the version generated 
    % automatically which uses the thunk DLL. Although using cdecl instead 
    % of thunk is officially unsupported, we only use simple pointers 
    % and values, without any complex structure. 
    % Tested on Windows, Linux and macOS.
    
    ival={cell(1,0)};
    structs=[];enuminfo=[];fcnNum=1;
    fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
    ThunkLibName = '';
    
    % void DSS_ResetStringBuffer ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSS_ResetStringBuffer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Dispose_PByte ( int8_t ** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PByte'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8PtrPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PDouble ( double ** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PDouble'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PInteger ( int32_t ** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PInteger'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PPAnsiChar ( char *** p , int32_t cnt ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='DSS_Dispose_PPAnsiChar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * DSS_Get_PAnsiChar ( void * p , int32_t index ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='DSS_Get_PAnsiChar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void DSS_DisposeGRData ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSS_DisposeGRData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_GetGRPointers ( char **** DataPtr_PPAnsiChar , double *** DataPtr_PDouble , int32_t *** DataPtr_PInteger , int8_t *** DataPtr_PByte , int32_t ** CountPtr_PPAnsiChar , int32_t ** CountPtr_PDouble , int32_t ** CountPtr_PInteger , int32_t ** CountPtr_PByte ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DSS_GetGRPointers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8PtrPtrPtrPtr', 'doublePtrPtrPtr', 'int32PtrPtrPtr', 'voidPtr', 'int32PtrPtr', 'int32PtrPtr', 'int32PtrPtr', 'int32PtrPtr'};fcnNum=fcnNum+1;
    % double * DSS_GR_DataPtr_PDouble ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='DSS_GR_DataPtr_PDouble'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t * DSS_GR_DataPtr_PInteger ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='DSS_GR_DataPtr_PInteger'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int8_t * DSS_GR_DataPtr_PByte ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='DSS_GR_DataPtr_PByte'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t * DSS_GR_CountPtr_PDouble ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='DSS_GR_CountPtr_PDouble'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t * DSS_GR_CountPtr_PInteger ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='DSS_GR_CountPtr_PInteger'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t * DSS_GR_CountPtr_PByte ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='DSS_GR_CountPtr_PByte'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % % void DSS_RegisterPlotCallback ( dss_callback_plot_t cb ); 
    % fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_RegisterPlotCallback'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
    % % void DSS_RegisterMessageCallback ( dss_callback_message_t cb ); 
    % fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_RegisterMessageCallback'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
    % void DSS_NewCircuit ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_NewCircuit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void ActiveClass_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ActiveClass_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ActiveClass_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ActiveClass_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t ActiveClass_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ActiveClass_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t ActiveClass_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ActiveClass_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * ActiveClass_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='ActiveClass_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ActiveClass_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ActiveClass_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t ActiveClass_Get_NumElements ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ActiveClass_Get_NumElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * ActiveClass_Get_ActiveClassName ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='ActiveClass_Get_ActiveClassName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t ActiveClass_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ActiveClass_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * ActiveClass_Get_ActiveClassParent ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='ActiveClass_Get_ActiveClassParent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * ActiveClass_ToJSON ( int32_t options ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='ActiveClass_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Bus_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Bus_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Bus_Get_NumNodes ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Bus_Get_NumNodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_SeqVoltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_SeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_SeqVoltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_SeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_Voltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_Voltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_Voltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_Voltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_Nodes ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_Nodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_Nodes_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_Nodes_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_Isc ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_Isc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_Isc_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_Isc_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_Voc ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_Voc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_Voc_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_Voc_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_kVBase ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_kVBase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_puVoltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_puVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_puVoltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_puVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_Zsc0 ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_Zsc0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_Zsc0_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_Zsc0_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_Zsc1 ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_Zsc1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_Zsc1_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_Zsc1_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_ZscMatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_ZscMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_ZscMatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_ZscMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Bus_ZscRefresh ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Bus_ZscRefresh'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_YscMatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_YscMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_YscMatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_YscMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Bus_Get_Coorddefined ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Bus_Get_Coorddefined'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_x ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Set_x ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Bus_Set_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Bus_Get_y ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Set_y ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Bus_Set_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Bus_Get_Distance ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_Distance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Bus_GetUniqueNodeNumber ( int32_t StartNumber ); 
    fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='Bus_GetUniqueNodeNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Bus_Get_CplxSeqVoltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_CplxSeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_CplxSeqVoltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_CplxSeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_Int_Duration ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_Int_Duration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_Lambda ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_Lambda'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_Cust_Duration ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_Cust_Duration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_Cust_Interrupts ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_Cust_Interrupts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Bus_Get_N_Customers ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Bus_Get_N_Customers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_N_interrupts ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_N_interrupts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_puVLL ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_puVLL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_puVLL_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_puVLL_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_VLL ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_VLL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_VLL_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_VLL_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_puVmagAngle ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_puVmagAngle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_puVmagAngle_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_puVmagAngle_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_VMagAngle ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_VMagAngle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_VMagAngle_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_VMagAngle_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Bus_Get_TotalMiles ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Bus_Get_TotalMiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Bus_Get_SectionID ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Bus_Get_SectionID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_LineList ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_LineList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_LineList_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_LineList_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_LoadList ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_LoadList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_LoadList_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_LoadList_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_ZSC012Matrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_ZSC012Matrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_ZSC012Matrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Bus_Get_ZSC012Matrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Bus_Get_AllPCEatBus ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_AllPCEatBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Bus_Get_AllPDEatBus ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Bus_Get_AllPDEatBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Capacitors_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Capacitors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Capacitors_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Capacitors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Capacitors_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Capacitors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Capacitors_Get_IsDelta ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Capacitors_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Capacitors_Get_kV ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Capacitors_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Capacitors_Get_kvar ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Capacitors_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Capacitors_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Capacitors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Capacitors_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Capacitors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Capacitors_Get_NumSteps ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Capacitors_Get_NumSteps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Capacitors_Set_IsDelta ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Capacitors_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Capacitors_Set_kV ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Capacitors_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Capacitors_Set_kvar ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Capacitors_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Capacitors_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Capacitors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Capacitors_Set_NumSteps ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Capacitors_Set_NumSteps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Capacitors_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Capacitors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Capacitors_AddStep ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Capacitors_AddStep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Capacitors_SubtractStep ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Capacitors_SubtractStep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Capacitors_Get_AvailableSteps ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Capacitors_Get_AvailableSteps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Capacitors_Get_States ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Capacitors_Get_States'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Capacitors_Get_States_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Capacitors_Get_States_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Capacitors_Set_States ( int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Capacitors_Set_States'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Capacitors_Open ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Capacitors_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Capacitors_Close ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Capacitors_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CapControls_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CapControls_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CapControls_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CapControls_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * CapControls_Get_Capacitor ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CapControls_Get_Capacitor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_CTratio ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_CTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_DeadTime ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_DeadTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_Delay ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_DelayOff ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_DelayOff'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CapControls_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CapControls_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CapControls_Get_Mode ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CapControls_Get_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * CapControls_Get_MonitoredObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CapControls_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CapControls_Get_MonitoredTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CapControls_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * CapControls_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CapControls_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CapControls_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CapControls_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_OFFSetting ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_OFFSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_ONSetting ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_ONSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_PTratio ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t CapControls_Get_UseVoltOverride ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='CapControls_Get_UseVoltOverride'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_Vmax ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_Vmax'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CapControls_Get_Vmin ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CapControls_Get_Vmin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CapControls_Set_Capacitor ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='CapControls_Set_Capacitor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void CapControls_Set_CTratio ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_CTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_DeadTime ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_DeadTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_Delay ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_DelayOff ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_DelayOff'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_Mode ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CapControls_Set_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void CapControls_Set_MonitoredObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='CapControls_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void CapControls_Set_MonitoredTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CapControls_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void CapControls_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='CapControls_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void CapControls_Set_OFFSetting ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_OFFSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_ONSetting ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_ONSetting'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_PTratio ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_UseVoltOverride ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='CapControls_Set_UseVoltOverride'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void CapControls_Set_Vmax ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_Vmax'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CapControls_Set_Vmin ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CapControls_Set_Vmin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t CapControls_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CapControls_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CapControls_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CapControls_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Circuit_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Circuit_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_Get_NumBuses ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_Get_NumBuses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_Get_NumCktElements ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_Get_NumCktElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_Get_NumNodes ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_Get_NumNodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_LineLosses ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_LineLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_LineLosses_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_LineLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_Losses ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_Losses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_Losses_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_Losses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusVmag ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllBusVmag'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusVmag_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllBusVmag_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusVolts ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllBusVolts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusVolts_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllBusVolts_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllElementNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllElementNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllElementNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllElementNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_SubstationLosses ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_SubstationLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_SubstationLosses_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_SubstationLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_TotalPower ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_TotalPower'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_TotalPower_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_TotalPower_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Disable ( const char * Name ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Circuit_Disable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Circuit_Enable ( const char * Name ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Circuit_Enable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Circuit_FirstPCElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_FirstPCElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_FirstPDElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_FirstPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_NextPCElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_NextPCElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_NextPDElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_NextPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllBusNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllBusNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllElementLosses ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllElementLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllElementLosses_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllElementLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Sample ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Sample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_SaveSample ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_SaveSample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_SetActiveElement ( const char * FullName ); 
    fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='Circuit_SetActiveElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Circuit_Capacity ( double Start , double Increment ); 
    fcns.thunkname{fcnNum}='doubledoubledoubleThunk';fcns.name{fcnNum}='Circuit_Capacity'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusVmagPu ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllBusVmagPu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusVmagPu_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllBusVmagPu_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_SetActiveBus ( const char * BusName ); 
    fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='Circuit_SetActiveBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Circuit_SetActiveBusi ( int32_t BusIndex ); 
    fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='Circuit_SetActiveBusi'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllNodeNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllNodeNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_SystemY ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_SystemY'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_SystemY_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_SystemY_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusDistances ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllBusDistances'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllBusDistances_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllBusDistances_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeDistances ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_AllNodeDistances'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeDistances_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_AllNodeDistances_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeDistancesByPhase ( double ** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeDistancesByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeDistancesByPhase_GR ( int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeDistancesByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeVmagByPhase ( double ** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeVmagByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeVmagByPhase_GR ( int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeVmagByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeVmagPUByPhase ( double ** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeVmagPUByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeVmagPUByPhase_GR ( int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeVmagPUByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeNamesByPhase ( char *** ResultPtr , int32_t * ResultCount , int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeNamesByPhase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_AllNodeNamesByPhase_GR ( int32_t Phase ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Circuit_Get_AllNodeNamesByPhase_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Circuit_SetActiveClass ( const char * ClassName ); 
    fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='Circuit_SetActiveClass'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Circuit_FirstElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_FirstElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_NextElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_NextElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_UpdateStorage ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_UpdateStorage'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Circuit_Get_ParentPDElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Circuit_Get_ParentPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_EndOfTimeStepUpdate ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_EndOfTimeStepUpdate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_YNodeOrder ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_YNodeOrder'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_YNodeOrder_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_YNodeOrder_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_YCurrents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_YCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_YCurrents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_YCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_Get_YNodeVarray ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Circuit_Get_YNodeVarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Circuit_Get_YNodeVarray_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Circuit_Get_YNodeVarray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Circuit_SetCktElementName ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Circuit_SetCktElementName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Circuit_SetCktElementIndex ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Circuit_SetCktElementIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void CktElement_Get_BusNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_BusNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_BusNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_BusNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * CktElement_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CktElement_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_NumConductors ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_NumConductors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_NumPhases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_NumPhases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_NumTerminals ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_NumTerminals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Set_BusNames ( char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='CktElement_Set_BusNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void CktElement_Get_Currents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Currents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_Currents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_Currents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_Voltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Voltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_Voltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_Voltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CktElement_Get_EmergAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CktElement_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t CktElement_Get_Enabled ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='CktElement_Get_Enabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_Losses ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Losses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_Losses_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_Losses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CktElement_Get_NormalAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CktElement_Get_NormalAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_PhaseLosses ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_PhaseLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_PhaseLosses_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_PhaseLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_Powers ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Powers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_Powers_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_Powers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_SeqCurrents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_SeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_SeqCurrents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_SeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_SeqPowers ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_SeqPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_SeqPowers_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_SeqPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_SeqVoltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_SeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_SeqVoltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_SeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Close ( int32_t Term , int32_t Phs ); 
    fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='CktElement_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
    % void CktElement_Open ( int32_t Term , int32_t Phs ); 
    fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='CktElement_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
    % void CktElement_Set_EmergAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CktElement_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void CktElement_Set_Enabled ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='CktElement_Set_Enabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void CktElement_Set_NormalAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CktElement_Set_NormalAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % uint16_t CktElement_IsOpen ( int32_t Term , int32_t Phs ); 
    fcns.thunkname{fcnNum}='uint16int32int32Thunk';fcns.name{fcnNum}='CktElement_IsOpen'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
    % void CktElement_Get_AllPropertyNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_AllPropertyNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_AllPropertyNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_AllPropertyNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_NumProperties ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_NumProperties'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_Residuals ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Residuals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_Residuals_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_Residuals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_Yprim ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Yprim'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_Yprim_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_Yprim_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * CktElement_Get_DisplayName ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CktElement_Get_DisplayName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * CktElement_Get_GUID ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CktElement_Get_GUID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_Handle ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_Handle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Set_DisplayName ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='CktElement_Set_DisplayName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * CktElement_Get_Controller ( int32_t idx ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='CktElement_Get_Controller'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * CktElement_Get_EnergyMeter ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CktElement_Get_EnergyMeter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t CktElement_Get_HasVoltControl ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='CktElement_Get_HasVoltControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t CktElement_Get_HasSwitchControl ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='CktElement_Get_HasSwitchControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_CplxSeqVoltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_CplxSeqVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_CplxSeqVoltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_CplxSeqVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_CplxSeqCurrents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_CplxSeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_CplxSeqCurrents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_CplxSeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_AllVariableNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_AllVariableNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_AllVariableNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_AllVariableNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_AllVariableValues ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_AllVariableValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_AllVariableValues_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_AllVariableValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CktElement_Get_Variable ( const char * MyVarName , int32_t * Code ); 
    fcns.thunkname{fcnNum}='doublecstringvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Variable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Set_Variable ( const char * MyVarName , int32_t * Code , double Value ); 
    fcns.thunkname{fcnNum}='voidcstringvoidPtrdoubleThunk';fcns.name{fcnNum}='CktElement_Set_Variable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'int32Ptr', 'double'};fcnNum=fcnNum+1;
    % double CktElement_Get_Variablei ( int32_t Idx , int32_t * Code ); 
    fcns.thunkname{fcnNum}='doubleint32voidPtrThunk';fcns.name{fcnNum}='CktElement_Get_Variablei'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Set_Variablei ( int32_t Idx , int32_t * Code , double Value ); 
    fcns.thunkname{fcnNum}='voidint32voidPtrdoubleThunk';fcns.name{fcnNum}='CktElement_Set_Variablei'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'double'};fcnNum=fcnNum+1;
    % void CktElement_Get_NodeOrder ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_NodeOrder'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_NodeOrder_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_NodeOrder_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t CktElement_Get_HasOCPDevice ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='CktElement_Get_HasOCPDevice'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_NumControls ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_NumControls'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_OCPDevIndex ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_OCPDevIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CktElement_Get_OCPDevType ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CktElement_Get_OCPDevType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_CurrentsMagAng ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_CurrentsMagAng'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_CurrentsMagAng_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_CurrentsMagAng_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_VoltagesMagAng ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_VoltagesMagAng'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_VoltagesMagAng_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_VoltagesMagAng_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t CktElement_Get_IsIsolated ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='CktElement_Get_IsIsolated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_TotalPowers ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_TotalPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_TotalPowers_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_TotalPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CmathLib_Get_cmplx ( double ** ResultPtr , int32_t * ResultCount , double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cmplx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_cmplx_GR ( double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voiddoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cmplx_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
    % double CmathLib_Get_cabs ( double realpart , double imagpart ); 
    fcns.thunkname{fcnNum}='doubledoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cabs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
    % double CmathLib_Get_cdang ( double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='doubledoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cdang'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_ctopolardeg ( double ** ResultPtr , int32_t * ResultCount , double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_ctopolardeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_ctopolardeg_GR ( double RealPart , double ImagPart ); 
    fcns.thunkname{fcnNum}='voiddoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_ctopolardeg_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_pdegtocomplex ( double ** ResultPtr , int32_t * ResultCount , double magnitude , double angle ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_pdegtocomplex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_pdegtocomplex_GR ( double magnitude , double angle ); 
    fcns.thunkname{fcnNum}='voiddoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_pdegtocomplex_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_cmul ( double ** ResultPtr , int32_t * ResultCount , double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cmul'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_cmul_GR ( double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voiddoubledoubledoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cmul_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_cdiv ( double ** ResultPtr , int32_t * ResultCount , double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cdiv'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void CmathLib_Get_cdiv_GR ( double a1 , double b1 , double a2 , double b2 ); 
    fcns.thunkname{fcnNum}='voiddoubledoubledoubledoubleThunk';fcns.name{fcnNum}='CmathLib_Get_cdiv_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
    % void CtrlQueue_ClearQueue ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CtrlQueue_ClearQueue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CtrlQueue_Delete ( int32_t ActionHandle ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CtrlQueue_Delete'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t CtrlQueue_Get_ActionCode ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CtrlQueue_Get_ActionCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CtrlQueue_Get_DeviceHandle ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CtrlQueue_Get_DeviceHandle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CtrlQueue_Get_NumActions ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CtrlQueue_Get_NumActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CtrlQueue_Push ( int32_t Hour , double Seconds , int32_t ActionCode , int32_t DeviceHandle ); 
    fcns.thunkname{fcnNum}='int32int32doubleint32int32Thunk';fcns.name{fcnNum}='CtrlQueue_Push'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void CtrlQueue_Show ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CtrlQueue_Show'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CtrlQueue_ClearActions ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CtrlQueue_ClearActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CtrlQueue_Get_PopAction ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CtrlQueue_Get_PopAction'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CtrlQueue_Set_Action ( int32_t Param1 ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CtrlQueue_Set_Action'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t CtrlQueue_Get_QueueSize ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CtrlQueue_Get_QueueSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CtrlQueue_DoAllQueue ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CtrlQueue_DoAllQueue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CtrlQueue_Get_Queue ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CtrlQueue_Get_Queue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CtrlQueue_Get_Queue_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CtrlQueue_Get_Queue_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t DSS_Get_NumCircuits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='DSS_Get_NumCircuits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_ClearAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSS_ClearAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSS_Get_Version ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='DSS_Get_Version'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t DSS_Start ( int32_t code ); 
    fcns.thunkname{fcnNum}='uint16int32Thunk';fcns.name{fcnNum}='DSS_Start'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void DSS_Get_Classes ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DSS_Get_Classes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void DSS_Get_Classes_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSS_Get_Classes_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Get_UserClasses ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DSS_Get_UserClasses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void DSS_Get_UserClasses_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSS_Get_UserClasses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t DSS_Get_NumClasses ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='DSS_Get_NumClasses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t DSS_Get_NumUserClasses ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='DSS_Get_NumUserClasses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSS_Get_DataPath ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='DSS_Get_DataPath'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Set_DataPath ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_Set_DataPath'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSS_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSS_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSS_Get_DefaultEditor ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='DSS_Get_DefaultEditor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t DSS_SetActiveClass ( const char * ClassName ); 
    fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='DSS_SetActiveClass'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % uint16_t DSS_Get_AllowForms ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='DSS_Get_AllowForms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Set_AllowForms ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='DSS_Set_AllowForms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t DSS_Get_AllowEditor ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='DSS_Get_AllowEditor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Set_AllowEditor ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='DSS_Set_AllowEditor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t DSS_Get_LegacyModels ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='DSS_Get_LegacyModels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Set_LegacyModels ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='DSS_Set_LegacyModels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t DSS_Get_AllowDOScmd ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='DSS_Get_AllowDOScmd'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Set_AllowDOScmd ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='DSS_Set_AllowDOScmd'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t DSS_Get_AllowChangeDir ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='DSS_Get_AllowChangeDir'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Set_AllowChangeDir ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='DSS_Set_AllowChangeDir'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t DSS_Get_COMErrorResults ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='DSS_Get_COMErrorResults'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSS_Set_COMErrorResults ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='DSS_Set_COMErrorResults'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void DSSElement_Get_AllPropertyNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DSSElement_Get_AllPropertyNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void DSSElement_Get_AllPropertyNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSSElement_Get_AllPropertyNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSSElement_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='DSSElement_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t DSSElement_Get_NumProperties ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='DSSElement_Get_NumProperties'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSSElement_ToJSON ( int32_t options ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='DSSElement_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void DSSimComs_BusVoltagepu ( double ** ResultPtr , int32_t * ResultCount , size_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='DSSimComs_BusVoltagepu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'uint64'};fcnNum=fcnNum+1;
    % void DSSimComs_BusVoltagepu_GR ( size_t Index ); 
    fcns.thunkname{fcnNum}='voiduint64Thunk';fcns.name{fcnNum}='DSSimComs_BusVoltagepu_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
    % void DSSimComs_BusVoltage ( double ** ResultPtr , int32_t * ResultCount , size_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='DSSimComs_BusVoltage'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'uint64'};fcnNum=fcnNum+1;
    % void DSSimComs_BusVoltage_GR ( size_t Index ); 
    fcns.thunkname{fcnNum}='voiduint64Thunk';fcns.name{fcnNum}='DSSimComs_BusVoltage_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
    % void DSSProgress_Close ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSSProgress_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSSProgress_Set_Caption ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSSProgress_Set_Caption'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSSProgress_Set_PctProgress ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='DSSProgress_Set_PctProgress'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void DSSProgress_Show ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DSSProgress_Show'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSSProperty_Get_Description ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='DSSProperty_Get_Description'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSSProperty_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='DSSProperty_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSSProperty_Get_Val ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='DSSProperty_Get_Val'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void DSSProperty_Set_Val ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSSProperty_Set_Val'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSSProperty_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSSProperty_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSSProperty_Set_Index ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='DSSProperty_Set_Index'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * DSS_Executive_Get_Command ( int32_t i ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='DSS_Executive_Get_Command'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t DSS_Executive_Get_NumCommands ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='DSS_Executive_Get_NumCommands'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t DSS_Executive_Get_NumOptions ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='DSS_Executive_Get_NumOptions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSS_Executive_Get_Option ( int32_t i ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='DSS_Executive_Get_Option'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * DSS_Executive_Get_CommandHelp ( int32_t i ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='DSS_Executive_Get_CommandHelp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * DSS_Executive_Get_OptionHelp ( int32_t i ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='DSS_Executive_Get_OptionHelp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * DSS_Executive_Get_OptionValue ( int32_t i ); 
    fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='DSS_Executive_Get_OptionValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Error_Get_Description ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Error_Get_Description'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Error_Get_Number ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Error_Get_Number'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t * Error_Get_NumberPtr ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='Error_Get_NumberPtr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Fuses_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Fuses_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Fuses_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Fuses_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Fuses_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Fuses_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Fuses_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Fuses_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Fuses_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Fuses_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Fuses_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Fuses_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Fuses_Get_MonitoredObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Fuses_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Fuses_Get_MonitoredTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Fuses_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Fuses_Get_SwitchedObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Fuses_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Set_MonitoredObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Fuses_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Fuses_Set_MonitoredTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Fuses_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Fuses_Set_SwitchedObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Fuses_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Fuses_Get_SwitchedTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Fuses_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Set_SwitchedTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Fuses_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Fuses_Get_TCCcurve ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Fuses_Get_TCCcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Set_TCCcurve ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Fuses_Set_TCCcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Fuses_Get_RatedCurrent ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Fuses_Get_RatedCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Set_RatedCurrent ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Fuses_Set_RatedCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Fuses_Get_Delay ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Fuses_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Open ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Fuses_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Close ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Fuses_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Set_Delay ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Fuses_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % uint16_t Fuses_IsBlown ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Fuses_IsBlown'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Fuses_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Fuses_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Fuses_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Fuses_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Fuses_Reset ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Fuses_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Fuses_Get_State ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Fuses_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Fuses_Set_State ( char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Fuses_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Fuses_Get_NormalState ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Fuses_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Fuses_Set_NormalState ( char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Fuses_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t Fuses_Get_NumPhases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Fuses_Get_NumPhases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Generators_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Generators_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Generators_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Generators_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Generators_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Generators_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Generators_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Get_RegisterNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Generators_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Generators_Get_RegisterNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Generators_Get_RegisterNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Get_RegisterValues ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Generators_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Generators_Get_RegisterValues_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Generators_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Generators_Get_ForcedON ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Generators_Get_ForcedON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_ForcedON ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Generators_Set_ForcedON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Generators_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Generators_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Generators_Get_kV ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Generators_Get_kvar ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Generators_Get_kW ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Generators_Get_PF ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Generators_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_kV ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Generators_Set_kvar ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Generators_Set_kW ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Generators_Set_PF ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Generators_Set_Phases ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Generators_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Generators_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Generators_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Generators_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Generators_Get_Model ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_Model ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Generators_Set_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Generators_Get_kVArated ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_kVArated ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Generators_Get_Vmaxpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Generators_Get_Vminpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_Vmaxpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Generators_Set_Vminpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * Generators_Get_daily ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Generators_Get_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_daily ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Generators_Set_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Generators_Get_duty ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Generators_Get_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_duty ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Generators_Set_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Generators_Get_Yearly ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Generators_Get_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_Yearly ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Generators_Set_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Generators_Get_Status ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_Status ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Generators_Set_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % uint16_t Generators_Get_IsDelta ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Generators_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_IsDelta ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Generators_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % double Generators_Get_kva ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Generators_Get_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_kva ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Generators_Set_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Generators_Get_Class_ ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Generators_Get_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_Class_ ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Generators_Set_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Generators_Get_Bus1 ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Generators_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Generators_Set_Bus1 ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Generators_Set_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void GICSources_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GICSources_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void GICSources_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='GICSources_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t GICSources_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='GICSources_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t GICSources_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='GICSources_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t GICSources_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='GICSources_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * GICSources_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='GICSources_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='GICSources_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t GICSources_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='GICSources_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_Phases ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='GICSources_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * GICSources_Get_Bus1 ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='GICSources_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * GICSources_Get_Bus2 ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='GICSources_Get_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double GICSources_Get_EN ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='GICSources_Get_EN'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_EN ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='GICSources_Set_EN'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double GICSources_Get_EE ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='GICSources_Get_EE'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_EE ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='GICSources_Set_EE'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double GICSources_Get_Lat1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='GICSources_Get_Lat1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_Lat1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='GICSources_Set_Lat1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double GICSources_Get_Lat2 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='GICSources_Get_Lat2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_Lat2 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='GICSources_Set_Lat2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double GICSources_Get_Lon1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='GICSources_Get_Lon1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_Lon1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='GICSources_Set_Lon1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double GICSources_Get_Lon2 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='GICSources_Get_Lon2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_Lon2 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='GICSources_Set_Lon2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double GICSources_Get_Volts ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='GICSources_Get_Volts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_Volts ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='GICSources_Set_Volts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void ISources_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ISources_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void ISources_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ISources_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t ISources_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ISources_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t ISources_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ISources_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t ISources_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ISources_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * ISources_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='ISources_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ISources_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ISources_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double ISources_Get_Amps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='ISources_Get_Amps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ISources_Set_Amps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='ISources_Set_Amps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double ISources_Get_AngleDeg ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='ISources_Get_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double ISources_Get_Frequency ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='ISources_Get_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ISources_Set_AngleDeg ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='ISources_Set_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void ISources_Set_Frequency ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='ISources_Set_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t LineCodes_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineCodes_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineCodes_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineCodes_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineCodes_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineCodes_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * LineCodes_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='LineCodes_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='LineCodes_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % uint16_t LineCodes_Get_IsZ1Z0 ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='LineCodes_Get_IsZ1Z0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineCodes_Get_Units ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineCodes_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_Units ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineCodes_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LineCodes_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineCodes_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_Phases ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineCodes_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double LineCodes_Get_R1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_R1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LineCodes_Get_X1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_X1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LineCodes_Get_R0 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double LineCodes_Get_X0 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_R0 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LineCodes_Set_X0 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LineCodes_Get_C0 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double LineCodes_Get_C1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_C0 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LineCodes_Set_C1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LineCodes_Get_Cmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineCodes_Get_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineCodes_Get_Cmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineCodes_Get_Cmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Get_Rmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineCodes_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineCodes_Get_Rmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineCodes_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Get_Xmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineCodes_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineCodes_Get_Xmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineCodes_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_Cmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineCodes_Set_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LineCodes_Set_Rmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineCodes_Set_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LineCodes_Set_Xmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineCodes_Set_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double LineCodes_Get_NormAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_NormAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LineCodes_Get_EmergAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineCodes_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_EmergAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineCodes_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LineCodes_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineCodes_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineCodes_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineCodes_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Lines_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Lines_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Lines_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Lines_Get_Bus1 ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Lines_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Lines_Get_Bus2 ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Lines_Get_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Lines_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_Length ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_Length'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Lines_Get_LineCode ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Lines_Get_LineCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Lines_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Lines_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Lines_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Lines_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_R1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_X1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Lines_New ( const char * Name ); 
    fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='Lines_New'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Lines_Set_Bus1 ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Lines_Set_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Lines_Set_Bus2 ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Lines_Set_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Lines_Set_Length ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_Length'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_LineCode ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Lines_Set_LineCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Lines_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Lines_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Lines_Set_Phases ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Lines_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Lines_Set_R1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_R1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_X1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_X1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Lines_Get_C0 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_C1 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Get_Cmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Lines_Get_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Lines_Get_Cmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Lines_Get_Cmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_R0 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Get_Rmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Lines_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Lines_Get_Rmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Lines_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_X0 ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Get_Xmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Lines_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Lines_Get_Xmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Lines_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_C0 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_C0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_C1 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_C1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_Cmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Lines_Set_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Lines_Set_R0 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_R0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_Rmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Lines_Set_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Lines_Set_X0 ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_X0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_Xmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Lines_Set_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double Lines_Get_EmergAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_NormAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_EmergAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_NormAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * Lines_Get_Geometry ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Lines_Get_Geometry'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_Geometry ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Lines_Set_Geometry'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Lines_Get_Rg ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_Rg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_Rho ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_Rho'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Lines_Get_Xg ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_Xg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_Rg ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_Rg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_Rho ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_Rho'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Set_Xg ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Lines_Set_Xg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Lines_Get_Yprim ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Lines_Get_Yprim'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Lines_Get_Yprim_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Lines_Get_Yprim_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_Yprim ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Lines_Set_Yprim'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t Lines_Get_NumCust ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_NumCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Lines_Get_TotalCust ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_TotalCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Lines_Get_Parent ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_Parent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Lines_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Lines_Get_Spacing ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Lines_Get_Spacing'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_Spacing ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Lines_Set_Spacing'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Lines_Get_Units ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_Units ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Lines_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Lines_Get_SeasonRating ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Lines_Get_SeasonRating'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Lines_Get_IsSwitch ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Lines_Get_IsSwitch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_IsSwitch ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Lines_Set_IsSwitch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Loads_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Loads_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Loads_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Loads_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Loads_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Loads_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Loads_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Loads_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Loads_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Loads_Get_kV ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_kvar ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_kW ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_PF ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Loads_Set_kV ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_kvar ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_kW ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_PF ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Loads_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_AllocationFactor ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_AllocationFactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_Cfactor ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_Cfactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_Class_ ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Loads_Get_CVRcurve ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_CVRcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_CVRvars ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_CVRvars'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_CVRwatts ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_CVRwatts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Loads_Get_daily ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Loads_Get_duty ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Loads_Get_Growth ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_Growth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Loads_Get_IsDelta ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Loads_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_kva ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_kwh ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_kwh'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_kwhdays ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_kwhdays'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_Model ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_NumCust ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_NumCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_PctMean ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_PctMean'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_PctStdDev ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_PctStdDev'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_Rneut ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Loads_Get_Spectrum ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_Spectrum'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_Status ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_Vmaxpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_Vminemerg ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_Vminemerg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_Vminnorm ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_Vminnorm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_Vminpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_xfkVA ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_xfkVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Loads_Get_Xneut ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Loads_Get_Yearly ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Loads_Set_AllocationFactor ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_AllocationFactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Cfactor ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_Cfactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Class_ ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Loads_Set_Class_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Loads_Set_CVRcurve ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Loads_Set_CVRcurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Loads_Set_CVRvars ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_CVRvars'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_CVRwatts ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_CVRwatts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_daily ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Loads_Set_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Loads_Set_duty ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Loads_Set_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Loads_Set_Growth ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Loads_Set_Growth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Loads_Set_IsDelta ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Loads_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Loads_Set_kva ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_kva'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_kwh ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_kwh'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_kwhdays ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_kwhdays'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Model ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Loads_Set_Model'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Loads_Set_NumCust ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Loads_Set_NumCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Loads_Set_PctMean ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_PctMean'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_PctStdDev ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_PctStdDev'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Rneut ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Spectrum ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Loads_Set_Spectrum'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Loads_Set_Status ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Loads_Set_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Loads_Set_Vmaxpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_Vmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Vminemerg ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_Vminemerg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Vminnorm ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_Vminnorm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Vminpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_Vminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_xfkVA ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_xfkVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Xneut ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Loads_Set_Yearly ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Loads_Set_Yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Loads_Get_ZIPV ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Loads_Get_ZIPV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Loads_Get_ZIPV_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Loads_Get_ZIPV_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Loads_Set_ZIPV ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Loads_Set_ZIPV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double Loads_Get_pctSeriesRL ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_pctSeriesRL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Loads_Set_pctSeriesRL ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_pctSeriesRL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Loads_Get_RelWeight ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Loads_Get_RelWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Loads_Set_RelWeight ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Loads_Set_RelWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * Loads_Get_Sensor ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Loads_Get_Sensor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * LoadShapes_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='LoadShapes_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='LoadShapes_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t LoadShapes_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LoadShapes_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LoadShapes_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LoadShapes_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LoadShapes_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LoadShapes_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadShapes_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LoadShapes_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LoadShapes_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LoadShapes_Get_Npts ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LoadShapes_Get_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Get_Pmult ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadShapes_Get_Pmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LoadShapes_Get_Pmult_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LoadShapes_Get_Pmult_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Get_Qmult ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadShapes_Get_Qmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LoadShapes_Get_Qmult_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LoadShapes_Get_Qmult_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_Npts ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LoadShapes_Set_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void LoadShapes_Set_Pmult ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LoadShapes_Set_Pmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LoadShapes_Set_Qmult ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LoadShapes_Set_Qmult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LoadShapes_Normalize ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LoadShapes_Normalize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Get_TimeArray ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadShapes_Get_TimeArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LoadShapes_Get_TimeArray_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LoadShapes_Get_TimeArray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_TimeArray ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LoadShapes_Set_TimeArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double LoadShapes_Get_HrInterval ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LoadShapes_Get_HrInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double LoadShapes_Get_MinInterval ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LoadShapes_Get_MinInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double LoadShapes_Get_SInterval ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LoadShapes_Get_SInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_SInterval ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LoadShapes_Set_SInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LoadShapes_Set_HrInterval ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LoadShapes_Set_HrInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LoadShapes_Set_MinInterval ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LoadShapes_Set_MinInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t LoadShapes_New ( const char * Name ); 
    fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='LoadShapes_New'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double LoadShapes_Get_PBase ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LoadShapes_Get_PBase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double LoadShapes_Get_Qbase ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LoadShapes_Get_Qbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_PBase ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LoadShapes_Set_PBase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LoadShapes_Set_Qbase ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LoadShapes_Set_Qbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % uint16_t LoadShapes_Get_UseActual ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='LoadShapes_Get_UseActual'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_UseActual ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='LoadShapes_Set_UseActual'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Meters_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Meters_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Meters_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Get_RegisterNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_RegisterNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_RegisterNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Get_RegisterValues ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_RegisterValues_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_ResetAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_ResetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Sample ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Sample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Save ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Save'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Meters_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Meters_Get_Totals ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_Totals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_Totals_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_Totals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Get_Peakcurrent ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_Peakcurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_Peakcurrent_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_Peakcurrent_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Set_Peakcurrent ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Meters_Set_Peakcurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Meters_Get_CalcCurrent ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_CalcCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_CalcCurrent_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_CalcCurrent_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Set_CalcCurrent ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Meters_Set_CalcCurrent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Meters_Get_AllocFactors ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_AllocFactors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_AllocFactors_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_AllocFactors_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Set_AllocFactors ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Meters_Set_AllocFactors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % char * Meters_Get_MeteredElement ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Meters_Get_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_MeteredTerminal ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Set_MeteredElement ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Meters_Set_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Meters_Set_MeteredTerminal ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Meters_Set_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % uint16_t Meters_Get_DIFilesAreOpen ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Meters_Get_DIFilesAreOpen'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_CloseAllDIFiles ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_CloseAllDIFiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_OpenAllDIFiles ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_OpenAllDIFiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_SampleAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_SampleAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_SaveAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_SaveAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Get_AllEndElements ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_AllEndElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_AllEndElements_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_AllEndElements_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_CountEndElements ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_CountEndElements'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Get_AllBranchesInZone ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_AllBranchesInZone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Meters_Get_AllBranchesInZone_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Meters_Get_AllBranchesInZone_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_CountBranches ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_CountBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Meters_Get_SAIFI ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Meters_Get_SAIFI'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_SequenceIndex ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_SequenceIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Set_SequenceIndex ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Meters_Set_SequenceIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Meters_Get_SAIFIKW ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Meters_Get_SAIFIKW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_DoReliabilityCalc ( uint16_t AssumeRestoration ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Meters_DoReliabilityCalc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % int32_t Meters_Get_SeqListSize ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_SeqListSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_TotalCustomers ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_TotalCustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Meters_Get_SAIDI ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Meters_Get_SAIDI'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Meters_Get_CustInterrupts ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Meters_Get_CustInterrupts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_NumSections ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_NumSections'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_SetActiveSection ( int32_t SectIdx ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Meters_SetActiveSection'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Meters_Get_AvgRepairTime ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Meters_Get_AvgRepairTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Meters_Get_FaultRateXRepairHrs ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Meters_Get_FaultRateXRepairHrs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_NumSectionBranches ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_NumSectionBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_NumSectionCustomers ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_NumSectionCustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_OCPDeviceType ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_OCPDeviceType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Meters_Get_SumBranchFltRates ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Meters_Get_SumBranchFltRates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_SectSeqIdx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_SectSeqIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Meters_Get_SectTotalCust ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_SectTotalCust'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Get_ZonePCE ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Meters_Get_ZonePCE'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Monitors_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Monitors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Monitors_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Monitors_Get_FileName ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Monitors_Get_FileName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_Mode ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Monitors_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Monitors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_ResetAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_ResetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Sample ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Sample'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Save ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Save'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Set_Mode ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Monitors_Set_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Monitors_Show ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Show'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Monitors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Monitors_Get_ByteStream ( int8_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Monitors_Get_ByteStream'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Monitors_Get_ByteStream_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Get_ByteStream_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_SampleCount ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_SampleCount'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_SampleAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_SampleAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_SaveAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_SaveAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Process ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Process'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_ProcessAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_ProcessAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Get_Channel ( double ** ResultPtr , int32_t * ResultCount , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Monitors_Get_Channel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Monitors_Get_Channel_GR ( int32_t Index ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Monitors_Get_Channel_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Monitors_Get_dblFreq ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Monitors_Get_dblFreq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Monitors_Get_dblFreq_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Get_dblFreq_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Get_dblHour ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Monitors_Get_dblHour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Monitors_Get_dblHour_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Get_dblHour_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_FileVersion ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_FileVersion'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Get_Header ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Monitors_Get_Header'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Monitors_Get_Header_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Monitors_Get_Header_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_NumChannels ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_NumChannels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Monitors_Get_RecordSize ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_RecordSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Monitors_Get_Element ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Monitors_Get_Element'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Set_Element ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Monitors_Set_Element'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Monitors_Get_Terminal ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_Terminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Set_Terminal ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Monitors_Set_Terminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Parallel_Get_NumCPUs ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parallel_Get_NumCPUs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Parallel_Get_NumCores ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parallel_Get_NumCores'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Parallel_Get_ActiveActor ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parallel_Get_ActiveActor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parallel_Set_ActiveActor ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Parallel_Set_ActiveActor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Parallel_CreateActor ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Parallel_CreateActor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Parallel_Get_ActorCPU ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parallel_Get_ActorCPU'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parallel_Set_ActorCPU ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Parallel_Set_ActorCPU'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Parallel_Get_NumOfActors ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parallel_Get_NumOfActors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parallel_Wait ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Parallel_Wait'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parallel_Get_ActorProgress ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Parallel_Get_ActorProgress'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Parallel_Get_ActorProgress_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Parallel_Get_ActorProgress_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parallel_Get_ActorStatus ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Parallel_Get_ActorStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Parallel_Get_ActorStatus_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Parallel_Get_ActorStatus_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Parallel_Get_ActiveParallel ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parallel_Get_ActiveParallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parallel_Set_ActiveParallel ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Parallel_Set_ActiveParallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Parallel_Get_ConcatenateReports ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parallel_Get_ConcatenateReports'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parallel_Set_ConcatenateReports ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Parallel_Set_ConcatenateReports'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Parser_Get_CmdString ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Parser_Get_CmdString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parser_Set_CmdString ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Parser_Set_CmdString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Parser_Get_NextParam ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Parser_Get_NextParam'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Parser_Get_AutoIncrement ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Parser_Get_AutoIncrement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parser_Set_AutoIncrement ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Parser_Set_AutoIncrement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % double Parser_Get_DblValue ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Parser_Get_DblValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Parser_Get_IntValue ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Parser_Get_IntValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Parser_Get_StrValue ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Parser_Get_StrValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Parser_Get_WhiteSpace ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Parser_Get_WhiteSpace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parser_Set_WhiteSpace ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Parser_Set_WhiteSpace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Parser_Get_BeginQuote ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Parser_Get_BeginQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Parser_Get_EndQuote ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Parser_Get_EndQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parser_Set_BeginQuote ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Parser_Set_BeginQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Parser_Set_EndQuote ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Parser_Set_EndQuote'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Parser_Get_Delimiters ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Parser_Get_Delimiters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parser_Set_Delimiters ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Parser_Set_Delimiters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Parser_ResetDelimiters ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Parser_ResetDelimiters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Parser_Get_Vector ( double ** ResultPtr , int32_t * ResultCount , int32_t ExpectedSize ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Parser_Get_Vector'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Parser_Get_Vector_GR ( int32_t ExpectedSize ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Parser_Get_Vector_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Parser_Get_Matrix ( double ** ResultPtr , int32_t * ResultCount , int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Parser_Get_Matrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Parser_Get_Matrix_GR ( int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Parser_Get_Matrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Parser_Get_SymMatrix ( double ** ResultPtr , int32_t * ResultCount , int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Parser_Get_SymMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Parser_Get_SymMatrix_GR ( int32_t ExpectedOrder ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Parser_Get_SymMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t PDElements_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PDElements_Get_FaultRate ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PDElements_Get_FaultRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PDElements_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t PDElements_Get_IsShunt ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='PDElements_Get_IsShunt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PDElements_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PDElements_Get_pctPermanent ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PDElements_Get_pctPermanent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Set_FaultRate ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PDElements_Set_FaultRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void PDElements_Set_pctPermanent ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PDElements_Set_pctPermanent'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * PDElements_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PDElements_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PDElements_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double PDElements_Get_AccumulatedL ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PDElements_Get_AccumulatedL'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PDElements_Get_Lambda ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PDElements_Get_Lambda'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PDElements_Get_Numcustomers ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_Numcustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PDElements_Get_ParentPDElement ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_ParentPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PDElements_Get_RepairTime ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PDElements_Get_RepairTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PDElements_Get_Totalcustomers ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_Totalcustomers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PDElements_Get_FromTerminal ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_FromTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PDElements_Get_TotalMiles ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PDElements_Get_TotalMiles'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PDElements_Get_SectionID ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PDElements_Get_SectionID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Set_RepairTime ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PDElements_Set_RepairTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllMaxCurrents ( double ** ResultPtr , int32_t * ResultCount , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PDElements_Get_AllMaxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'uint16'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllMaxCurrents_GR ( uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='PDElements_Get_AllMaxCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllPctNorm ( double ** ResultPtr , int32_t * ResultCount , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PDElements_Get_AllPctNorm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'uint16'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllPctNorm_GR ( uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='PDElements_Get_AllPctNorm_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllPctEmerg ( double ** ResultPtr , int32_t * ResultCount , uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='PDElements_Get_AllPctEmerg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'uint16'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllPctEmerg_GR ( uint16_t AllNodes ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='PDElements_Get_AllPctEmerg_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllCurrents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllCurrents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllCurrentsMagAng ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllCurrentsMagAng'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllCurrentsMagAng_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllCurrentsMagAng_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllCplxSeqCurrents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllCplxSeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllCplxSeqCurrents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllCplxSeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllSeqCurrents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllSeqCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllSeqCurrents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllSeqCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllPowers ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllPowers_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllSeqPowers ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllSeqPowers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllSeqPowers_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllSeqPowers_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllNumPhases ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllNumPhases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllNumPhases_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllNumPhases_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllNumConductors ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllNumConductors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllNumConductors_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllNumConductors_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PDElements_Get_AllNumTerminals ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PDElements_Get_AllNumTerminals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PDElements_Get_AllNumTerminals_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PDElements_Get_AllNumTerminals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PVSystems_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PVSystems_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PVSystems_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Get_RegisterNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PVSystems_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PVSystems_Get_RegisterNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PVSystems_Get_RegisterNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Get_RegisterValues ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PVSystems_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void PVSystems_Get_RegisterValues_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='PVSystems_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PVSystems_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PVSystems_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PVSystems_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PVSystems_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PVSystems_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PVSystems_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t PVSystems_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='PVSystems_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='PVSystems_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * PVSystems_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PVSystems_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double PVSystems_Get_Irradiance ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PVSystems_Get_Irradiance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_Irradiance ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PVSystems_Set_Irradiance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double PVSystems_Get_kvar ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PVSystems_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PVSystems_Get_kVArated ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PVSystems_Get_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PVSystems_Get_kW ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PVSystems_Get_kW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double PVSystems_Get_PF ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PVSystems_Get_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_kVArated ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PVSystems_Set_kVArated'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void PVSystems_Set_PF ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PVSystems_Set_PF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void PVSystems_Set_kvar ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PVSystems_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * PVSystems_Get_daily ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_daily ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PVSystems_Set_daily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * PVSystems_Get_duty ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_duty ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PVSystems_Set_duty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * PVSystems_Get_yearly ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_yearly ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PVSystems_Set_yearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * PVSystems_Get_Tdaily ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_Tdaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_Tdaily ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PVSystems_Set_Tdaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * PVSystems_Get_Tduty ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_Tduty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_Tduty ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PVSystems_Set_Tduty'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * PVSystems_Get_Tyearly ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_Tyearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_Tyearly ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='PVSystems_Set_Tyearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double PVSystems_Get_Pmpp ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PVSystems_Get_Pmpp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void PVSystems_Set_Pmpp ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='PVSystems_Set_Pmpp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double PVSystems_Get_IrradianceNow ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='PVSystems_Get_IrradianceNow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * PVSystems_Get_Sensor ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='PVSystems_Get_Sensor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reclosers_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reclosers_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reclosers_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Reclosers_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reclosers_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reclosers_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_MonitoredTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_MonitoredTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reclosers_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Reclosers_Get_SwitchedObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reclosers_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_SwitchedObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reclosers_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Reclosers_Get_MonitoredObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reclosers_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_SwitchedTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_MonitoredObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reclosers_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Reclosers_Set_SwitchedTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reclosers_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_NumFast ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_NumFast'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Get_RecloseIntervals ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reclosers_Get_RecloseIntervals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reclosers_Get_RecloseIntervals_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reclosers_Get_RecloseIntervals_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_Shots ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_Shots'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_NumFast ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reclosers_Set_NumFast'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Reclosers_Set_Shots ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reclosers_Set_Shots'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Reclosers_Get_PhaseTrip ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reclosers_Get_PhaseTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_PhaseTrip ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reclosers_Set_PhaseTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Reclosers_Get_GroundInst ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reclosers_Get_GroundInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Reclosers_Get_GroundTrip ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reclosers_Get_GroundTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Reclosers_Get_PhaseInst ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reclosers_Get_PhaseInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_GroundInst ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reclosers_Set_GroundInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Reclosers_Set_GroundTrip ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reclosers_Set_GroundTrip'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Reclosers_Set_PhaseInst ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reclosers_Set_PhaseInst'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Reclosers_Close ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reclosers_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Open ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reclosers_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reclosers_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reclosers_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_State ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_State ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reclosers_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Reclosers_Get_NormalState ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reclosers_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reclosers_Set_NormalState ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reclosers_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void RegControls_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RegControls_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void RegControls_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='RegControls_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_CTPrimary ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_CTPrimary'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_Delay ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t RegControls_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ForwardBand ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ForwardBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ForwardR ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ForwardR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ForwardVreg ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ForwardVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ForwardX ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ForwardX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t RegControls_Get_IsInverseTime ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='RegControls_Get_IsInverseTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t RegControls_Get_IsReversible ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='RegControls_Get_IsReversible'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t RegControls_Get_MaxTapChange ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_MaxTapChange'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * RegControls_Get_MonitoredBus ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='RegControls_Get_MonitoredBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * RegControls_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='RegControls_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t RegControls_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_PTratio ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ReverseBand ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ReverseBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ReverseR ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ReverseR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ReverseVreg ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ReverseVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_ReverseX ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_ReverseX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_TapDelay ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_TapDelay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t RegControls_Get_TapWinding ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_TapWinding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * RegControls_Get_Transformer ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='RegControls_Get_Transformer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double RegControls_Get_VoltageLimit ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='RegControls_Get_VoltageLimit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t RegControls_Get_Winding ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_Winding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t RegControls_Get_TapNumber ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_TapNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void RegControls_Set_CTPrimary ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_CTPrimary'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_Delay ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ForwardBand ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ForwardBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ForwardR ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ForwardR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ForwardVreg ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ForwardVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ForwardX ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ForwardX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_IsInverseTime ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='RegControls_Set_IsInverseTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void RegControls_Set_IsReversible ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='RegControls_Set_IsReversible'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void RegControls_Set_MaxTapChange ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='RegControls_Set_MaxTapChange'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void RegControls_Set_MonitoredBus ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='RegControls_Set_MonitoredBus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void RegControls_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='RegControls_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void RegControls_Set_PTratio ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_PTratio'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ReverseBand ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ReverseBand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ReverseR ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ReverseR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ReverseVreg ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ReverseVreg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_ReverseX ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_ReverseX'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_TapDelay ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_TapDelay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_TapWinding ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='RegControls_Set_TapWinding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void RegControls_Set_Transformer ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='RegControls_Set_Transformer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void RegControls_Set_VoltageLimit ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='RegControls_Set_VoltageLimit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void RegControls_Set_Winding ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='RegControls_Set_Winding'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void RegControls_Set_TapNumber ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='RegControls_Set_TapNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t RegControls_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void RegControls_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='RegControls_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Relays_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Relays_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Relays_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Relays_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Relays_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Relays_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Relays_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Relays_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Relays_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Relays_Get_MonitoredObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Relays_Get_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Set_MonitoredObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Relays_Set_MonitoredObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Relays_Get_MonitoredTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Relays_Get_SwitchedObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Relays_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Set_MonitoredTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Relays_Set_MonitoredTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Relays_Set_SwitchedObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Relays_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Relays_Get_SwitchedTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Set_SwitchedTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Relays_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Relays_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Relays_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Relays_Open ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Relays_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Close ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Relays_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Relays_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Relays_Get_State ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Set_State ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Relays_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Relays_Get_NormalState ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Relays_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Relays_Set_NormalState ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Relays_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Sensors_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Sensors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Sensors_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Sensors_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Sensors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Get_Currents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Sensors_Get_Currents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Sensors_Get_Currents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_Get_Currents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Sensors_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Sensors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Sensors_Get_IsDelta ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Sensors_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Get_kVARS ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Sensors_Get_kVARS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Sensors_Get_kVARS_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_Get_kVARS_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Get_kVS ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Sensors_Get_kVS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Sensors_Get_kVS_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_Get_kVS_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Get_kWS ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Sensors_Get_kWS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Sensors_Get_kWS_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_Get_kWS_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Sensors_Get_MeteredElement ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Sensors_Get_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Sensors_Get_MeteredTerminal ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Sensors_Get_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Sensors_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Sensors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Sensors_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Sensors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Sensors_Get_PctError ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Sensors_Get_PctError'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Sensors_Get_ReverseDelta ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Sensors_Get_ReverseDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Sensors_Get_Weight ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Sensors_Get_Weight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_ResetAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_ResetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Set_Currents ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Sensors_Set_Currents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Sensors_Set_IsDelta ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Sensors_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Sensors_Set_kVARS ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Sensors_Set_kVARS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Sensors_Set_kVS ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Sensors_Set_kVS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Sensors_Set_kWS ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Sensors_Set_kWS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Sensors_Set_MeteredElement ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Sensors_Set_MeteredElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Sensors_Set_MeteredTerminal ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Sensors_Set_MeteredTerminal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Sensors_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Sensors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Sensors_Set_PctError ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Sensors_Set_PctError'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Sensors_Set_ReverseDelta ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Sensors_Set_ReverseDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Sensors_Set_Weight ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Sensors_Set_Weight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Sensors_Get_kVbase ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Sensors_Get_kVbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Set_kVbase ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Sensors_Set_kVbase'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Sensors_Get_AllocationFactor ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Sensors_Get_AllocationFactor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Sensors_Get_AllocationFactor_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Sensors_Get_AllocationFactor_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Settings_Get_AllowDuplicates ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Settings_Get_AllowDuplicates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Settings_Get_AutoBusList ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Settings_Get_AutoBusList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Settings_Get_CktModel ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Settings_Get_CktModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Set_CktModel ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Settings_Set_CktModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Settings_Get_EmergVmaxpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Settings_Get_EmergVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Settings_Get_EmergVminpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Settings_Get_EmergVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Settings_Get_NormVmaxpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Settings_Get_NormVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Settings_Get_NormVminpu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Settings_Get_NormVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Settings_Get_ZoneLock ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Settings_Get_ZoneLock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Set_AllocationFactors ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_AllocationFactors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Settings_Set_AllowDuplicates ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Settings_Set_AllowDuplicates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Settings_Set_AutoBusList ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Settings_Set_AutoBusList'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Settings_Set_EmergVmaxpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_EmergVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Settings_Set_EmergVminpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_EmergVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Settings_Set_NormVmaxpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_NormVmaxpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Settings_Set_NormVminpu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_NormVminpu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Settings_Set_ZoneLock ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Settings_Set_ZoneLock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Settings_Get_LossRegs ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Settings_Get_LossRegs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Settings_Get_LossRegs_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Settings_Get_LossRegs_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Settings_Get_LossWeight ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Settings_Get_LossWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Settings_Get_Trapezoidal ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Settings_Get_Trapezoidal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Get_UEregs ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Settings_Get_UEregs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Settings_Get_UEregs_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Settings_Get_UEregs_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Settings_Get_UEweight ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Settings_Get_UEweight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Set_LossRegs ( int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Settings_Set_LossRegs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Settings_Set_LossWeight ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_LossWeight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Settings_Set_Trapezoidal ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Settings_Set_Trapezoidal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Settings_Set_UEregs ( int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Settings_Set_UEregs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Settings_Set_UEweight ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_UEweight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % uint16_t Settings_Get_ControlTrace ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Settings_Get_ControlTrace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Get_VoltageBases ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Settings_Get_VoltageBases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Settings_Get_VoltageBases_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Settings_Get_VoltageBases_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Set_ControlTrace ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Settings_Set_ControlTrace'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Settings_Set_VoltageBases ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Settings_Set_VoltageBases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % char * Settings_Get_PriceCurve ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Settings_Get_PriceCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Settings_Get_PriceSignal ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Settings_Get_PriceSignal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Set_PriceCurve ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Settings_Set_PriceCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Settings_Set_PriceSignal ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Settings_Set_PriceSignal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % uint16_t Settings_Get_LoadsTerminalCheck ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Settings_Get_LoadsTerminalCheck'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Set_LoadsTerminalCheck ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Settings_Set_LoadsTerminalCheck'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % int32_t Settings_Get_IterateDisabled ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Settings_Get_IterateDisabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Settings_Set_IterateDisabled ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Settings_Set_IterateDisabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Solution_Get_Frequency ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_Hour ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Hour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_Iterations ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Iterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_LoadMult ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_LoadMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_MaxIterations ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_MaxIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_Mode ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_Number ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Number'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_Random ( int32_t Random ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_Random'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Solution_Get_Random ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Random'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_Seconds ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_Seconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_StepSize ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_StepSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_Tolerance ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_Tolerance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_Year ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Year'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_Frequency ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Solution_Set_Hour ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_Hour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_Set_LoadMult ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_LoadMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Solution_Set_MaxIterations ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_MaxIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_Set_Mode ( int32_t Mode ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_Mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_Set_Number ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_Number'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_Set_Seconds ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_Seconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Solution_Set_StepSize ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_StepSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Solution_Set_Tolerance ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_Tolerance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Solution_Set_Year ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_Year'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_Solve ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Solve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Solution_Get_ModeID ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Solution_Get_ModeID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_LoadModel ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_LoadModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_LoadModel ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_LoadModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Solution_Get_LDCurve ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Solution_Get_LDCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_LDCurve ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Solution_Set_LDCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Solution_Get_pctGrowth ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_pctGrowth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_pctGrowth ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_pctGrowth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Solution_Get_AddType ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_AddType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_AddType ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_AddType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Solution_Get_GenkW ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_GenkW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_GenkW ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_GenkW'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Solution_Get_GenPF ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_GenPF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_GenPF ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_GenPF'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Solution_Get_Capkvar ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_Capkvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_Capkvar ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_Capkvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Solution_Get_Algorithm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Algorithm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_Algorithm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_Algorithm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Solution_Get_ControlMode ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_ControlMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_ControlMode ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_ControlMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Solution_Get_GenMult ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_GenMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_GenMult ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_GenMult'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * Solution_Get_DefaultDaily ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Solution_Get_DefaultDaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Solution_Get_DefaultYearly ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Solution_Get_DefaultYearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_DefaultDaily ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Solution_Set_DefaultDaily'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Solution_Set_DefaultYearly ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Solution_Set_DefaultYearly'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Solution_Get_EventLog ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Solution_Get_EventLog'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Solution_Get_EventLog_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Get_EventLog_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_dblHour ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_dblHour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_dblHour ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_dblHour'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Solution_Set_StepsizeHr ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_StepsizeHr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Solution_Set_StepsizeMin ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_StepsizeMin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Solution_Get_ControlIterations ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_ControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_MaxControlIterations ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_MaxControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Sample_DoControlActions ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Sample_DoControlActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_ControlIterations ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_ControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_Set_MaxControlIterations ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_MaxControlIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_CheckFaultStatus ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_CheckFaultStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_SolveDirect ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_SolveDirect'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_SolveNoControl ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_SolveNoControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_SolvePflow ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_SolvePflow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_SolvePlusControl ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_SolvePlusControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_SolveSnap ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_SolveSnap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_CheckControls ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_CheckControls'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_InitSnap ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_InitSnap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Solution_Get_SystemYChanged ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Solution_Get_SystemYChanged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_BuildYMatrix ( int32_t BuildOption , int32_t AllocateVI ); 
    fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='Solution_BuildYMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
    % void Solution_DoControlActions ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_DoControlActions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_SampleControlDevices ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_SampleControlDevices'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Solution_Get_Converged ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Solution_Get_Converged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_Converged ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Solution_Set_Converged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % int32_t Solution_Get_Totaliterations ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_Totaliterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Solution_Get_MostIterationsDone ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_MostIterationsDone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Solution_Get_ControlActionsDone ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Solution_Get_ControlActionsDone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_ControlActionsDone ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Solution_Set_ControlActionsDone'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Solution_Cleanup ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Cleanup'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_FinishTimeStep ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_FinishTimeStep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_Process_Time ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_Process_Time'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_Total_Time ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_Total_Time'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_Total_Time ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_Total_Time'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Solution_Get_Time_of_Step ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_Time_of_Step'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Solution_Get_IntervalHrs ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Solution_Get_IntervalHrs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_IntervalHrs ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Solution_Set_IntervalHrs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Solution_Get_MinIterations ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Solution_Get_MinIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Set_MinIterations ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Solution_Set_MinIterations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Solution_SolveAll ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_SolveAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Get_IncMatrix ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Solution_Get_IncMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Solution_Get_IncMatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Get_IncMatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Get_Laplacian ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Solution_Get_Laplacian'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Solution_Get_Laplacian_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Get_Laplacian_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Get_BusLevels ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Solution_Get_BusLevels'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Solution_Get_BusLevels_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Get_BusLevels_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Get_IncMatrixRows ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Solution_Get_IncMatrixRows'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Solution_Get_IncMatrixRows_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Get_IncMatrixRows_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Solution_Get_IncMatrixCols ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Solution_Get_IncMatrixCols'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Solution_Get_IncMatrixCols_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Solution_Get_IncMatrixCols_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_Action ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_Action'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void SwtControls_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SwtControls_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void SwtControls_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='SwtControls_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double SwtControls_Get_Delay ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='SwtControls_Get_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t SwtControls_Get_IsLocked ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='SwtControls_Get_IsLocked'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * SwtControls_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='SwtControls_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * SwtControls_Get_SwitchedObj ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='SwtControls_Get_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_SwitchedTerm ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void SwtControls_Set_Action ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='SwtControls_Set_Action'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void SwtControls_Set_Delay ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='SwtControls_Set_Delay'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void SwtControls_Set_IsLocked ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='SwtControls_Set_IsLocked'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void SwtControls_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='SwtControls_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void SwtControls_Set_SwitchedObj ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='SwtControls_Set_SwitchedObj'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void SwtControls_Set_SwitchedTerm ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='SwtControls_Set_SwitchedTerm'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_NormalState ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void SwtControls_Set_NormalState ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='SwtControls_Set_NormalState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_State ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void SwtControls_Set_State ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='SwtControls_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void SwtControls_Reset ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='SwtControls_Reset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Text_Get_Command ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Text_Get_Command'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Text_Set_Command ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Text_Set_Command'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Text_Get_Result ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Text_Get_Result'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_NumLoops ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_NumLoops'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_ActiveBranch ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_ActiveBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Topology_Get_AllIsolatedBranches ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Topology_Get_AllIsolatedBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Topology_Get_AllIsolatedBranches_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Topology_Get_AllIsolatedBranches_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Topology_Get_AllLoopedPairs ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Topology_Get_AllLoopedPairs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Topology_Get_AllLoopedPairs_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Topology_Get_AllLoopedPairs_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_BackwardBranch ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_BackwardBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Topology_Get_BranchName ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Topology_Get_BranchName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_ForwardBranch ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_ForwardBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_LoopedBranch ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_LoopedBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_NumIsolatedBranches ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_NumIsolatedBranches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_ParallelBranch ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_ParallelBranch'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Topology_Set_BranchName ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Topology_Set_BranchName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Topology_Get_AllIsolatedLoads ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Topology_Get_AllIsolatedLoads'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Topology_Get_AllIsolatedLoads_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Topology_Get_AllIsolatedLoads_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_FirstLoad ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_FirstLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_NextLoad ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_NextLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_NumIsolatedLoads ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_NumIsolatedLoads'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Topology_Get_ActiveLevel ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Topology_Get_ActiveLevel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Topology_Get_BusName ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Topology_Get_BusName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Topology_Set_BusName ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Topology_Set_BusName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Transformers_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Transformers_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Transformers_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Transformers_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Transformers_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Transformers_Get_IsDelta ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Transformers_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_kV ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_kVA ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_kVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_MaxTap ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_MaxTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_MinTap ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_MinTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Transformers_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Transformers_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Transformers_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Transformers_Get_NumTaps ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_NumTaps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Transformers_Get_NumWindings ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_NumWindings'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_R ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_Rneut ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_Tap ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_Tap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Transformers_Get_Wdg ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_Wdg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Transformers_Get_XfmrCode ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Transformers_Get_XfmrCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_Xhl ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_Xhl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_Xht ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_Xht'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_Xlt ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_Xlt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Transformers_Get_Xneut ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Transformers_Set_IsDelta ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Transformers_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % void Transformers_Set_kV ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_kVA ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_kVA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_MaxTap ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_MaxTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_MinTap ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_MinTap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Transformers_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Transformers_Set_NumTaps ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Transformers_Set_NumTaps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Transformers_Set_NumWindings ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Transformers_Set_NumWindings'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Transformers_Set_R ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_Rneut ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_Rneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_Tap ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_Tap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_Wdg ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Transformers_Set_Wdg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Transformers_Set_XfmrCode ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Transformers_Set_XfmrCode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Transformers_Set_Xhl ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_Xhl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_Xht ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_Xht'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_Xlt ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_Xlt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Set_Xneut ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_Xneut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Transformers_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Transformers_Get_WdgVoltages ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Transformers_Get_WdgVoltages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Transformers_Get_WdgVoltages_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Transformers_Get_WdgVoltages_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Transformers_Get_WdgCurrents ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Transformers_Get_WdgCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Transformers_Get_WdgCurrents_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Transformers_Get_WdgCurrents_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Transformers_Get_strWdgCurrents ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Transformers_Get_strWdgCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Transformers_Get_CoreType ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_CoreType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Transformers_Set_CoreType ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Transformers_Set_CoreType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double Transformers_Get_RdcOhms ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Transformers_Get_RdcOhms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Transformers_Set_RdcOhms ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Transformers_Set_RdcOhms'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Transformers_Get_LossesByType ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Transformers_Get_LossesByType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Transformers_Get_LossesByType_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Transformers_Get_LossesByType_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Transformers_Get_AllLossesByType ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Transformers_Get_AllLossesByType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Transformers_Get_AllLossesByType_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Transformers_Get_AllLossesByType_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Vsources_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Vsources_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Vsources_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Vsources_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Vsources_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Vsources_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Vsources_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Vsources_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Vsources_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Vsources_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Vsources_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Vsources_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Vsources_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Vsources_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Vsources_Get_BasekV ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Vsources_Get_BasekV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Vsources_Get_pu ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Vsources_Get_pu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Vsources_Set_BasekV ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Vsources_Set_BasekV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Vsources_Set_pu ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Vsources_Set_pu'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Vsources_Get_AngleDeg ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Vsources_Get_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Vsources_Get_Frequency ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Vsources_Get_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Vsources_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Vsources_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Vsources_Set_AngleDeg ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Vsources_Set_AngleDeg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Vsources_Set_Frequency ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Vsources_Set_Frequency'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void Vsources_Set_Phases ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Vsources_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void XYCurves_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XYCurves_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void XYCurves_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='XYCurves_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t XYCurves_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='XYCurves_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t XYCurves_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='XYCurves_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * XYCurves_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='XYCurves_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t XYCurves_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='XYCurves_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void XYCurves_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='XYCurves_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t XYCurves_Get_Npts ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='XYCurves_Get_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void XYCurves_Get_Xarray ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XYCurves_Get_Xarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void XYCurves_Get_Xarray_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='XYCurves_Get_Xarray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void XYCurves_Set_Npts ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='XYCurves_Set_Npts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void XYCurves_Set_Xarray ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='XYCurves_Set_Xarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double XYCurves_Get_x ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='XYCurves_Get_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double XYCurves_Get_y ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='XYCurves_Get_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void XYCurves_Get_Yarray ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XYCurves_Get_Yarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void XYCurves_Get_Yarray_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='XYCurves_Get_Yarray_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void XYCurves_Set_x ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='XYCurves_Set_x'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void XYCurves_Set_y ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='XYCurves_Set_y'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void XYCurves_Set_Yarray ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='XYCurves_Set_Yarray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % double XYCurves_Get_Xscale ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='XYCurves_Get_Xscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double XYCurves_Get_Xshift ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='XYCurves_Get_Xshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double XYCurves_Get_Yscale ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='XYCurves_Get_Yscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double XYCurves_Get_Yshift ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='XYCurves_Get_Yshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void XYCurves_Set_Xscale ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='XYCurves_Set_Xscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void XYCurves_Set_Xshift ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='XYCurves_Set_Xshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void XYCurves_Set_Yscale ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='XYCurves_Set_Yscale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void XYCurves_Set_Yshift ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='XYCurves_Set_Yshift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void YMatrix_GetCompressedYMatrix ( uint16_t factor , uint32_t * nBus , uint32_t * nNz , int32_t ** ColPtr , int32_t ** RowIdxPtr , double ** cValsPtr ); 
    fcns.thunkname{fcnNum}='voiduint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='YMatrix_GetCompressedYMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16', 'uint32Ptr', 'uint32Ptr', 'int32PtrPtr', 'int32PtrPtr', 'doublePtrPtr'};fcnNum=fcnNum+1;
    % void YMatrix_ZeroInjCurr ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='YMatrix_ZeroInjCurr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_GetSourceInjCurrents ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='YMatrix_GetSourceInjCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_GetPCInjCurr ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='YMatrix_GetPCInjCurr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_BuildYMatrixD ( int32_t BuildOps , int32_t AllocateVI ); 
    fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='YMatrix_BuildYMatrixD'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
    % void YMatrix_AddInAuxCurrents ( int32_t SType ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='YMatrix_AddInAuxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void YMatrix_getIpointer ( double ** IvectorPtr ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='YMatrix_getIpointer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr'};fcnNum=fcnNum+1;
    % void YMatrix_getVpointer ( double ** VvectorPtr ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='YMatrix_getVpointer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr'};fcnNum=fcnNum+1;
    % int32_t YMatrix_SolveSystem ( double * NodeVPtr ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='YMatrix_SolveSystem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
    % void YMatrix_Set_SystemYChanged ( uint16_t arg ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='YMatrix_Set_SystemYChanged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t YMatrix_Get_SystemYChanged ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='YMatrix_Get_SystemYChanged'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_Set_UseAuxCurrents ( uint16_t arg ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='YMatrix_Set_UseAuxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t YMatrix_Get_UseAuxCurrents ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='YMatrix_Get_UseAuxCurrents'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double ReduceCkt_Get_Zmag ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='ReduceCkt_Get_Zmag'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_Set_Zmag ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='ReduceCkt_Set_Zmag'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % uint16_t ReduceCkt_Get_KeepLoad ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='ReduceCkt_Get_KeepLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_Set_KeepLoad ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='ReduceCkt_Set_KeepLoad'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % char * ReduceCkt_Get_EditString ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='ReduceCkt_Get_EditString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_Set_EditString ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ReduceCkt_Set_EditString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * ReduceCkt_Get_StartPDElement ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='ReduceCkt_Get_StartPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_Set_StartPDElement ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ReduceCkt_Set_StartPDElement'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * ReduceCkt_Get_EnergyMeter ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='ReduceCkt_Get_EnergyMeter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_Set_EnergyMeter ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ReduceCkt_Set_EnergyMeter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void ReduceCkt_SaveCircuit ( const char * CktName ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ReduceCkt_SaveCircuit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void ReduceCkt_DoDefault ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_DoDefault'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_DoShortLines ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_DoShortLines'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_DoDangling ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_DoDangling'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_DoLoopBreak ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_DoLoopBreak'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_DoParallelLines ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_DoParallelLines'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_DoSwitches ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_DoSwitches'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_Do1phLaterals ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_Do1phLaterals'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ReduceCkt_DoBranchRemove ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ReduceCkt_DoBranchRemove'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Storages_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Storages_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % int32_t Storages_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Storages_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Storages_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Storages_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Storages_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Storages_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Storages_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Storages_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Storages_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Storages_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % char * Storages_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Storages_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Storages_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Storages_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Storages_Get_RegisterNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Storages_Get_RegisterNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Storages_Get_RegisterValues ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Storages_Get_RegisterValues'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Storages_Get_RegisterValues_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Storages_Get_RegisterValues_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Storages_Get_puSOC ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Storages_Get_puSOC'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Storages_Set_puSOC ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Storages_Set_puSOC'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Storages_Get_State ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Storages_Get_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Storages_Set_State ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Storages_Set_State'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t CNData_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CNData_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t CNData_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * CNData_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='CNData_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='CNData_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void CNData_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CNData_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CNData_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CNData_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double CNData_Get_Rdc ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_Rdc ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_Rac ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_Rac ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_GMRac ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_GMRac ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t CNData_Get_GMRUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_GMRUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CNData_Set_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double CNData_Get_Radius ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_Radius ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t CNData_Get_RadiusUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_RadiusUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CNData_Set_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t CNData_Get_ResistanceUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_ResistanceUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CNData_Set_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double CNData_Get_Diameter ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_Diameter ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_NormAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_NormAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_EmergAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_EmergAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_EpsR ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_EpsR ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_InsLayer ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_InsLayer ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_DiaIns ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_DiaIns ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_DiaCable ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_DiaCable ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t CNData_Get_k ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_k'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_k ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CNData_Set_k'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double CNData_Get_DiaStrand ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_DiaStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_DiaStrand ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_DiaStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_GmrStrand ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_GmrStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_GmrStrand ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_GmrStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double CNData_Get_RStrand ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='CNData_Get_RStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_RStrand ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='CNData_Set_RStrand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t LineGeometries_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineGeometries_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineGeometries_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineGeometries_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineGeometries_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineGeometries_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * LineGeometries_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='LineGeometries_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='LineGeometries_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t LineGeometries_Get_Nconds ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineGeometries_Get_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_Nconds ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineGeometries_Set_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LineGeometries_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineGeometries_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_Phases ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineGeometries_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Cmatrix ( double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Cmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Cmatrix_GR ( double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voiddoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Cmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Rmatrix ( double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Rmatrix_GR ( double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voiddoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Xmatrix ( double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Xmatrix_GR ( double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voiddoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Zmatrix ( double ** ResultPtr , int32_t * ResultCount , double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Zmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Zmatrix_GR ( double Frequency , double Length , int32_t Units ); 
    fcns.thunkname{fcnNum}='voiddoubledoubleint32Thunk';fcns.name{fcnNum}='LineGeometries_Get_Zmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double', 'double', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Units ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineGeometries_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Units_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineGeometries_Get_Units_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_Units ( int32_t * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineGeometries_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Xcoords ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineGeometries_Get_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Xcoords_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineGeometries_Get_Xcoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_Xcoords ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineGeometries_Set_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Ycoords ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineGeometries_Get_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Ycoords_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineGeometries_Get_Ycoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_Ycoords ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineGeometries_Set_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Conductors ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineGeometries_Get_Conductors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_Conductors_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineGeometries_Get_Conductors_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t LineGeometries_Get_Reduce ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='LineGeometries_Get_Reduce'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_Reduce ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='LineGeometries_Set_Reduce'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % double LineGeometries_Get_RhoEarth ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineGeometries_Get_RhoEarth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_RhoEarth ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineGeometries_Set_RhoEarth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LineGeometries_Get_NormAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineGeometries_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_NormAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineGeometries_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LineGeometries_Get_EmergAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LineGeometries_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_EmergAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LineGeometries_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineGeometries_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineGeometries_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineGeometries_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineSpacings_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineSpacings_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineSpacings_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineSpacings_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t LineSpacings_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineSpacings_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * LineSpacings_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='LineSpacings_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineSpacings_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='LineSpacings_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t LineSpacings_Get_Nconds ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineSpacings_Get_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineSpacings_Set_Nconds ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineSpacings_Set_Nconds'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LineSpacings_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineSpacings_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineSpacings_Set_Phases ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineSpacings_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LineSpacings_Get_Units ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineSpacings_Get_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineSpacings_Set_Units ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineSpacings_Set_Units'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void LineSpacings_Get_Xcoords ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineSpacings_Get_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineSpacings_Get_Xcoords_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineSpacings_Get_Xcoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineSpacings_Set_Xcoords ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineSpacings_Set_Xcoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LineSpacings_Get_Ycoords ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineSpacings_Get_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineSpacings_Get_Ycoords_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineSpacings_Get_Ycoords_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineSpacings_Set_Ycoords ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='LineSpacings_Set_Ycoords'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void LineSpacings_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LineSpacings_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void LineSpacings_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LineSpacings_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Loads_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Loads_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Loads_Set_Phases ( int32_t Integer ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Loads_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Reactors_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reactors_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reactors_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reactors_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Reactors_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reactors_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reactors_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % int32_t Reactors_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reactors_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reactors_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reactors_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t Reactors_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reactors_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double Reactors_Get_kV ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reactors_Get_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_kV ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reactors_Set_kV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Reactors_Get_kvar ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reactors_Get_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_kvar ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reactors_Set_kvar'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Reactors_Get_Phases ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reactors_Get_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Phases ( int32_t Integer ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reactors_Set_Phases'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % uint16_t Reactors_Get_IsDelta ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Reactors_Get_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_IsDelta ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Reactors_Set_IsDelta'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t Reactors_Get_Parallel ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Reactors_Get_Parallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Parallel ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Reactors_Set_Parallel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % double Reactors_Get_LmH ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reactors_Get_LmH'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_LmH ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reactors_Set_LmH'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * Reactors_Get_Bus1 ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reactors_Get_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * Reactors_Get_Bus2 ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reactors_Get_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Bus1 ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reactors_Set_Bus1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Reactors_Set_Bus2 ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reactors_Set_Bus2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % double Reactors_Get_R ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reactors_Get_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_R ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reactors_Set_R'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Reactors_Get_X ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reactors_Get_X'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_X ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reactors_Set_X'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double Reactors_Get_Rp ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='Reactors_Get_Rp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Rp ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='Reactors_Set_Rp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % char * Reactors_Get_RCurve ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reactors_Get_RCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_RCurve ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reactors_Set_RCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % char * Reactors_Get_LCurve ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='Reactors_Get_LCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_LCurve ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Reactors_Set_LCurve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Reactors_Get_Rmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reactors_Get_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reactors_Get_Rmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reactors_Get_Rmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Rmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Reactors_Set_Rmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Reactors_Get_Xmatrix ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reactors_Get_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reactors_Get_Xmatrix_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reactors_Get_Xmatrix_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Xmatrix ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Reactors_Set_Xmatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reactors_Get_Z'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reactors_Get_Z_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Z ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Reactors_Set_Z'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z1 ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reactors_Get_Z1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z1_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reactors_Get_Z1_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Z1 ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Reactors_Set_Z1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z2 ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reactors_Get_Z2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z2_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reactors_Get_Z2_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Z2 ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Reactors_Set_Z2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z0 ( double ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Reactors_Get_Z0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Reactors_Get_Z0_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='Reactors_Get_Z0_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_Z0 ( double * ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Reactors_Set_Z0'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t Reactors_Get_SpecType ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reactors_Get_SpecType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t TSData_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='TSData_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t TSData_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='TSData_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t TSData_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='TSData_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * TSData_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='TSData_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='TSData_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void TSData_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='TSData_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void TSData_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='TSData_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double TSData_Get_Rdc ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_Rdc ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_Rac ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_Rac ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_GMRac ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_GMRac ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t TSData_Get_GMRUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='TSData_Get_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_GMRUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='TSData_Set_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double TSData_Get_Radius ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_Radius ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t TSData_Get_RadiusUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='TSData_Get_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_RadiusUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='TSData_Set_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t TSData_Get_ResistanceUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='TSData_Get_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_ResistanceUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='TSData_Set_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double TSData_Get_Diameter ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_Diameter ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_NormAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_NormAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_EmergAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_EmergAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_EpsR ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_EpsR ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_EpsR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_InsLayer ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_InsLayer ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_InsLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_DiaIns ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_DiaIns ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_DiaIns'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_DiaCable ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_DiaCable ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_DiaCable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_DiaShield ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_DiaShield'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_DiaShield ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_DiaShield'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_TapeLayer ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_TapeLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_TapeLayer ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_TapeLayer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double TSData_Get_TapeLap ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='TSData_Get_TapeLap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_TapeLap ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='TSData_Set_TapeLap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t WireData_Get_Count ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WireData_Get_Count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t WireData_Get_First ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WireData_Get_First'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % int32_t WireData_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WireData_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * WireData_Get_Name ( void ); 
    fcns.thunkname{fcnNum}='cstringvoidThunk';fcns.name{fcnNum}='WireData_Get_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_Name ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='WireData_Set_Name'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void WireData_Get_AllNames ( char *** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WireData_Get_AllNames'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void WireData_Get_AllNames_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='WireData_Get_AllNames_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % double WireData_Get_Rdc ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_Rdc ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_Rdc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double WireData_Get_Rac ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_Rac ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_Rac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double WireData_Get_GMRac ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_GMRac ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_GMRac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t WireData_Get_GMRUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WireData_Get_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_GMRUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='WireData_Set_GMRUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double WireData_Get_Radius ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_Radius ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_Radius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t WireData_Get_RadiusUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WireData_Get_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_RadiusUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='WireData_Set_RadiusUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t WireData_Get_ResistanceUnits ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WireData_Get_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_ResistanceUnits ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='WireData_Set_ResistanceUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % double WireData_Get_Diameter ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_Diameter ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_Diameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double WireData_Get_NormAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_NormAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_NormAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double WireData_Get_EmergAmps ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_EmergAmps ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_EmergAmps'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double WireData_Get_CapRadius ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='WireData_Get_CapRadius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_CapRadius ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='WireData_Set_CapRadius'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % int32_t Bus_Get_Next ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Bus_Get_Next'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t Error_Get_EarlyAbort ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Error_Get_EarlyAbort'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Error_Set_EarlyAbort ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Error_Set_EarlyAbort'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t Error_Get_ExtendedErrors ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='Error_Get_ExtendedErrors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Error_Set_ExtendedErrors ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='Error_Set_ExtendedErrors'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % int32_t CNData_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CNData_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CNData_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CNData_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t CapControls_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='CapControls_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CapControls_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='CapControls_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Capacitors_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Capacitors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Capacitors_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Capacitors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t GICSources_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='GICSources_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void GICSources_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='GICSources_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t ISources_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='ISources_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void ISources_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='ISources_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LineCodes_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineCodes_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineCodes_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineCodes_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LineGeometries_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineGeometries_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineGeometries_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineGeometries_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LineSpacings_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LineSpacings_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LineSpacings_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LineSpacings_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Lines_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Lines_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Lines_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Lines_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t LoadShapes_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='LoadShapes_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='LoadShapes_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Meters_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Meters_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Meters_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Meters_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Monitors_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Monitors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Monitors_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Monitors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Reactors_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Reactors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Reactors_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Reactors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t RegControls_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='RegControls_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void RegControls_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='RegControls_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Sensors_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Sensors_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Sensors_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Sensors_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t SwtControls_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='SwtControls_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void SwtControls_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='SwtControls_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t TSData_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='TSData_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void TSData_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='TSData_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Transformers_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Transformers_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Transformers_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Transformers_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t Vsources_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='Vsources_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Vsources_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Vsources_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t WireData_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='WireData_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void WireData_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='WireData_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % int32_t XYCurves_Get_idx ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='XYCurves_Get_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void XYCurves_Set_idx ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='XYCurves_Set_idx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_ElementLosses ( double ** ResultPtr , int32_t * ResultCount , int32_t * ElementsPtr , int32_t ElementsCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Circuit_Get_ElementLosses'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Circuit_Get_ElementLosses_GR ( int32_t * ElementsPtr , int32_t ElementsCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Circuit_Get_ElementLosses_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void LoadShapes_Set_Points ( int32_t Npts , void * HoursPtr , void * PMultPtr , void * QMultPtr , uint16_t ExternalMemory , uint16_t IsFloat32 , int32_t Stride ); 
    fcns.thunkname{fcnNum}='voidint32voidPtrvoidPtrvoidPtruint16uint16int32Thunk';fcns.name{fcnNum}='LoadShapes_Set_Points'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'voidPtr', 'voidPtr', 'uint16', 'uint16', 'int32'};fcnNum=fcnNum+1;
    % void LoadShapes_UseFloat32 ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LoadShapes_UseFloat32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_UseFloat64 ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='LoadShapes_UseFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_MaxP ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LoadShapes_Set_MaxP'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LoadShapes_Get_MaxP ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LoadShapes_Get_MaxP'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void LoadShapes_Set_MaxQ ( double Value ); 
    fcns.thunkname{fcnNum}='voiddoubleThunk';fcns.name{fcnNum}='LoadShapes_Set_MaxQ'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
    % double LoadShapes_Get_MaxQ ( void ); 
    fcns.thunkname{fcnNum}='doublevoidThunk';fcns.name{fcnNum}='LoadShapes_Get_MaxQ'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void CktElement_Get_NodeRef ( int32_t ** ResultPtr , int32_t * ResultCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CktElement_Get_NodeRef'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
    % void CktElement_Get_NodeRef_GR ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='CktElement_Get_NodeRef_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t YMatrix_CheckConvergence ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='YMatrix_CheckConvergence'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_SetGeneratordQdV ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='YMatrix_SetGeneratordQdV'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % uint16_t YMatrix_Get_LoadsNeedUpdating ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='YMatrix_Get_LoadsNeedUpdating'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_Set_LoadsNeedUpdating ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='YMatrix_Set_LoadsNeedUpdating'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % uint16_t YMatrix_Get_SolutionInitialized ( void ); 
    fcns.thunkname{fcnNum}='uint16voidThunk';fcns.name{fcnNum}='YMatrix_Get_SolutionInitialized'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_Set_SolutionInitialized ( uint16_t Value ); 
    fcns.thunkname{fcnNum}='voiduint16Thunk';fcns.name{fcnNum}='YMatrix_Set_SolutionInitialized'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
    % int32_t YMatrix_Get_Iteration ( void ); 
    fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='YMatrix_Get_Iteration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_Set_Iteration ( int32_t Value ); 
    fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='YMatrix_Set_Iteration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
    % void * YMatrix_Get_Handle ( void ); 
    fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='YMatrix_Get_Handle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void YMatrix_Set_SolverOptions ( uint64_t opts ); 
    fcns.thunkname{fcnNum}='voiduint64Thunk';fcns.name{fcnNum}='YMatrix_Set_SolverOptions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
    % uint64_t YMatrix_Get_SolverOptions ( void ); 
    fcns.thunkname{fcnNum}='uint64voidThunk';fcns.name{fcnNum}='YMatrix_Get_SolverOptions'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % void Text_CommandBlock ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='Text_CommandBlock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void Text_CommandArray ( char ** ValuePtr , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Text_CommandArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void ZIP_Open ( const char * FileName ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ZIP_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void ZIP_Redirect ( const char * FileInZip ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ZIP_Redirect'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % uint16_t ZIP_Contains ( const char * Name ); 
    fcns.thunkname{fcnNum}='uint16cstringThunk';fcns.name{fcnNum}='ZIP_Contains'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void ZIP_List ( char *** ResultPtr , int32_t * ResultCount , const char * RegExp ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='ZIP_List'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
    % void ZIP_Extract ( int8_t ** ResultPtr , int32_t * ResultCount , const char * FileName ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='ZIP_Extract'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8PtrPtr', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
    % void ZIP_Extract_GR ( const char * FileName ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ZIP_Extract_GR'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void ZIP_Close ( void ); 
    fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='ZIP_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
    % char * DSS_ExtractSchema ( void * ctx ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='DSS_ExtractSchema'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void DSS_Dispose_String ( char * S ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_Dispose_String'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSS_Dispose_PPointer ( void *** p ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_Dispose_PPointer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr'};fcnNum=fcnNum+1;
    % void * Obj_New ( void * ctx , int32_t ClsIdx , const char * Name , uint16_t Activate , uint16_t BeginEdit ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32cstringuint16uint16Thunk';fcns.name{fcnNum}='Obj_New'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring', 'uint16', 'uint16'};fcnNum=fcnNum+1;
    % int32_t Obj_GetCount ( void * ctx , int32_t ClsIdx ); 
    fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetCount'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void * Obj_GetHandleByName ( void * ctx , int32_t ClsIdx , const char * Name ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Obj_GetHandleByName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void * Obj_GetHandleByIdx ( void * ctx , int32_t ClsIdx , int32_t Idx ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Obj_GetHandleByIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % uint16_t Obj_PropertySideEffects ( void * obj , int32_t Index , int32_t PreviousInt ); 
    fcns.thunkname{fcnNum}='uint16voidPtrint32int32Thunk';fcns.name{fcnNum}='Obj_PropertySideEffects'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Obj_BeginEdit ( void * obj ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='Obj_BeginEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void Obj_EndEdit ( void * obj , int32_t NumChanges ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_EndEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t Obj_GetNumProperties ( void * obj ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='Obj_GetNumProperties'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * Obj_ToJSON ( void * obj , int32_t options ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * Batch_ToJSON ( void ** batch , int32_t batchSize , int32_t options ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_ToJSON'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % char * Obj_GetName ( void * obj ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='Obj_GetName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * Obj_GetClassName ( void * obj ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='Obj_GetClassName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % int32_t Obj_GetIdx ( void * obj ); 
    fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='Obj_GetIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % char * Obj_GetClassIdx ( void * obj ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='Obj_GetClassIdx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void Obj_Activate ( void * obj , uint16_t AllLists ); 
    fcns.thunkname{fcnNum}='voidvoidPtruint16Thunk';fcns.name{fcnNum}='Obj_Activate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint16'};fcnNum=fcnNum+1;
    % int32_t * Obj_GetPropSeqPtr ( void * obj ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='Obj_GetPropSeqPtr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % double Obj_GetFloat64 ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='doublevoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % int32_t Obj_GetInt32 ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetInt32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void * Obj_GetObject ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * Obj_GetString ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % char * Obj_GetAsString ( void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='cstringvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetAsString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetFloat64Array ( double ** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetFloat64Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetInt32Array ( int32_t ** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetInt32Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetStringArray ( char *** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetStringArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_GetObjectArray ( void *** ResultPtr , int32_t * ResultCount , void * obj , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Obj_GetObjectArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr', 'int32Ptr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetAsString ( void * obj , int32_t Index , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringThunk';fcns.name{fcnNum}='Obj_SetAsString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Obj_SetFloat64 ( void * obj , int32_t Index , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32doubleThunk';fcns.name{fcnNum}='Obj_SetFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'double'};fcnNum=fcnNum+1;
    % void Obj_SetInt32 ( void * obj , int32_t Index , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='Obj_SetInt32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetString ( void * obj , int32_t Index , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringThunk';fcns.name{fcnNum}='Obj_SetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Obj_SetObject ( void * obj , int32_t Index , void * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='Obj_SetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
    % void Obj_SetFloat64Array ( void * obj , int32_t Index , double * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetFloat64Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetInt32Array ( void * obj , int32_t Index , int32_t * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetInt32Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetStringArray ( void * obj , int32_t Index , const char ** Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetStringArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Obj_SetObjectArray ( void * obj , int32_t Index , void ** Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Obj_SetObjectArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_Dispose ( void ** batch ); 
    fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='Batch_Dispose'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_BeginEdit ( void ** batch , int32_t batchSize ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_BeginEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_EndEdit ( void ** batch , int32_t batchSize , int32_t numEdits ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_EndEdit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetPropSeq ( int32_t ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_GetPropSeq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateFromNew ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsid , const char ** names , int32_t count , uint16_t BeginEdit ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32voidPtrint32uint16Thunk';fcns.name{fcnNum}='Batch_CreateFromNew'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'stringPtrPtr', 'int32', 'uint16'};fcnNum=fcnNum+1;
    % void Batch_CreateByClass ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsidx ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_CreateByClass'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateByRegExp ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsidx , const char * re ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_CreateByRegExp'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_CreateByIndex ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t clsidx , int32_t * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='Batch_CreateByIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateByInt32Property ( void * ctx , void *** ResultPtr , int32_t * ResultCount , int32_t ClsIdx , int32_t idx , int32_t value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32int32Thunk';fcns.name{fcnNum}='Batch_CreateByInt32Property'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetFloat64 ( double ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetFloat64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetInt32 ( int32_t ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetInt32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetString ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetAsString ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetAsString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetObject ( void *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , int32_t Index ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='Batch_GetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_Float64 ( void ** batch , int32_t batchSize , int32_t Index , int32_t Operation , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32int32doubleThunk';fcns.name{fcnNum}='Batch_Float64'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
    % void Batch_Int32 ( void ** batch , int32_t batchSize , int32_t Index , int32_t Operation , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32int32int32Thunk';fcns.name{fcnNum}='Batch_Int32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_SetString ( void ** batch , int32_t batchSize , int32_t Index , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32cstringThunk';fcns.name{fcnNum}='Batch_SetString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_SetObject ( void ** batch , int32_t batchSize , int32_t Index , const void * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetObject'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
    % void Batch_SetFloat64Array ( void ** batch , int32_t batchSize , int32_t Index , double * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetFloat64Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
    % void Batch_SetInt32Array ( void ** batch , int32_t batchSize , int32_t Index , int32_t * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetInt32Array'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Batch_SetStringArray ( void ** batch , int32_t batchSize , int32_t Index , const char ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetStringArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'stringPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_SetObjectArray ( void ** batch , int32_t batchSize , int32_t Index , const void ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='Batch_SetObjectArray'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'int32', 'voidPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_CreateFromNewS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , const char ** names , int32_t count , uint16_t BeginEdit ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringvoidPtrint32uint16Thunk';fcns.name{fcnNum}='Batch_CreateFromNewS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'stringPtrPtr', 'int32', 'uint16'};fcnNum=fcnNum+1;
    % void Batch_CreateByClassS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='Batch_CreateByClassS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_CreateByRegExpS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , const char * re ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringcstringThunk';fcns.name{fcnNum}='Batch_CreateByRegExpS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_CreateByIndexS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , int32_t * Value , int32_t ValueCount ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringvoidPtrint32Thunk';fcns.name{fcnNum}='Batch_CreateByIndexS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
    % void Batch_CreateByInt32PropertyS ( void * ctx , void *** ResultPtr , int32_t * ResultCount , const char * clsname , const char * Name , int32_t value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringcstringint32Thunk';fcns.name{fcnNum}='Batch_CreateByInt32PropertyS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtrPtr', 'int32Ptr', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
    % void Batch_GetFloat64S ( double ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetFloat64S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetInt32S ( int32_t ** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetInt32S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32PtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetStringS ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetStringS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetAsStringS ( char *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetAsStringS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_GetObjectS ( void *** ResultPtr , int32_t * ResultCount , void ** batch , int32_t batchSize , const char * Name ); 
    fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrint32cstringThunk';fcns.name{fcnNum}='Batch_GetObjectS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtrPtr', 'int32Ptr', 'voidPtrPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_Float64S ( void ** batch , int32_t batchSize , const char * Name , int32_t Operation , double Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringint32doubleThunk';fcns.name{fcnNum}='Batch_Float64S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'int32', 'double'};fcnNum=fcnNum+1;
    % void Batch_Int32S ( void ** batch , int32_t batchSize , const char * Name , int32_t Operation , int32_t Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringint32int32Thunk';fcns.name{fcnNum}='Batch_Int32S'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
    % void Batch_SetStringS ( void ** batch , int32_t batchSize , const char * Name , const char * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringcstringThunk';fcns.name{fcnNum}='Batch_SetStringS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
    % void Batch_SetObjectS ( void ** batch , int32_t batchSize , const char * Name , const void * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetObjectS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'voidPtr'};fcnNum=fcnNum+1;
    % void Batch_SetFloat64ArrayS ( void ** batch , int32_t batchSize , const char * Name , double * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetFloat64ArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
    % void Batch_SetInt32ArrayS ( void ** batch , int32_t batchSize , const char * Name , int32_t * Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetInt32ArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
    % void Batch_SetStringArrayS ( void ** batch , int32_t batchSize , const char * Name , const char ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetStringArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'stringPtrPtr'};fcnNum=fcnNum+1;
    % void Batch_SetObjectArrayS ( void ** batch , int32_t batchSize , const char * Name , const void ** Value ); 
    fcns.thunkname{fcnNum}='voidvoidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='Batch_SetObjectArrayS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtrPtr', 'int32', 'cstring', 'voidPtrPtr'};fcnNum=fcnNum+1;
    % % void * DSS_BeginPascalThread ( void * func , void * paramptr ); 
    % fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DSS_BeginPascalThread'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
    % % void DSS_WaitPascalThread ( void * handle ); 
    % fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DSS_WaitPascalThread'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
    % void DSS_SetMessagesMO ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_SetMessagesMO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    % void DSS_SetPropertiesMO ( const char * Value ); 
    fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='DSS_SetPropertiesMO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
    enuminfo.LineUnits=struct('LineUnits_none',0,'LineUnits_Miles',1,'LineUnits_kFt',2,'LineUnits_km',3,'LineUnits_meter',4,'LineUnits_ft',5,'LineUnits_inch',6,'LineUnits_cm',7,'LineUnits_mm',8,'LineUnits_Maxnum',9);
    enuminfo.RandomModes=struct('RandomModes_Gaussian',1,'RandomModes_Uniform',2,'RandomModes_LogNormal',3);
    enuminfo.MonitorModes=struct('MonitorModes_VI',0,'MonitorModes_Power',1,'MonitorModes_Taps',2,'MonitorModes_States',3,'MonitorModes_Sequence',16,'MonitorModes_Magnitude',32,'MonitorModes_PosOnly',64);
    enuminfo.DSSJSONFlags=struct('DSSJSONFlags_Full',1,'DSSJSONFlags_SkipRedundant',2,'DSSJSONFlags_EnumAsInt',4,'DSSJSONFlags_FullNames',8,'DSSJSONFlags_Pretty',16,'DSSJSONFlags_ExcludeDisabled',32,'DSSJSONFlags_State',64,'DSSJSONFlags_Debug',128);
    enuminfo.CapControlModes=struct('CapControlModes_Current',0,'CapControlModes_Voltage',1,'CapControlModes_KVAR',2,'CapControlModes_Time',3,'CapControlModes_PF',4);
    enuminfo.StorageStates=struct('StorageStates_Charging',-1,'StorageStates_Idling',0,'StorageStates_Discharging',1);
    enuminfo.ControlModes=struct('ControlModes_Static',0,'ControlModes_Event',1,'ControlModes_Time',2,'ControlModes_Multirate',3,'ControlModes_ControlOff',-1);
    enuminfo.SolutionAlgorithms=struct('SolutionAlgorithms_NormalSolve',0,'SolutionAlgorithms_NewtonSolve',1);
    enuminfo.CktModels=struct('CktModels_Multiphase',0,'CktModels_PositiveSeq',1);
    enuminfo.AutoAddTypes=struct('AutoAddTypes_AddGen',1,'AutoAddTypes_AddCap',2);
    enuminfo.BatchOperation=struct('BatchOperation_Set',0,'BatchOperation_Multiply',1,'BatchOperation_Increment',2);
    enuminfo.LoadModels=struct('LoadModels_ConstPQ',1,'LoadModels_ConstZ',2,'LoadModels_Motor',3,'LoadModels_CVR',4,'LoadModels_ConstI',5,'LoadModels_ConstPFixedQ',6,'LoadModels_ConstPFixedX',7,'LoadModels_ZIPV',8);
    enuminfo.SolveModes=struct('SolveModes_SnapShot',0,'SolveModes_Daily',1,'SolveModes_Yearly',2,'SolveModes_Monte1',3,'SolveModes_LD1',4,'SolveModes_PeakDay',5,'SolveModes_DutyCycle',6,'SolveModes_Direct',7,'SolveModes_MonteFault',8,'SolveModes_FaultStudy',9,'SolveModes_Monte2',10,'SolveModes_Monte3',11,'SolveModes_LD2',12,'SolveModes_AutoAdd',13,'SolveModes_Dynamic',14,'SolveModes_Harmonic',15);
    enuminfo.LoadStatus=struct('LoadStatus_Variable',0,'LoadStatus_Fixed',1,'LoadStatus_Exempt',2);
    enuminfo.SolutionLoadModels=struct('SolutionLoadModels_PowerFlow',1,'SolutionLoadModels_Admittance',2);
    enuminfo.SolverOptions=struct('SolverOptions_ReuseNothing',0,'SolverOptions_ReuseCompressedMatrix',1,'SolverOptions_ReuseSymbolicFactorization',2,'SolverOptions_ReuseNumericFactorization',3,'SolverOptions_AlwaysResetYPrimInvalid',268435456);
    enuminfo.GeneratorStatus=struct('GeneratorStatus_Variable',0,'GeneratorStatus_Fixed',1);
    enuminfo.YMatrixModes=struct('YMatrixModes_SeriesOnly',1,'YMatrixModes_WholeMatrix',2);
    enuminfo.ActionCodes=struct('ActionCodes_none',0,'ActionCodes_Open',1,'ActionCodes_Close',2,'ActionCodes_Reset',3,'ActionCodes_Lock',4,'ActionCodes_Unlock',5,'ActionCodes_TapUp',6,'ActionCodes_TapDown',7);
    enuminfo.DSSMessageType=struct('DSSMessageType_Error',-1,'DSSMessageType_General',0,'DSSMessageType_Info',1,'DSSMessageType_Help',2,'DSSMessageType_Progress',3,'DSSMessageType_ProgressCaption',4,'DSSMessageType_ProgressFormCaption',5,'DSSMessageType_ProgressPercent',6,'DSSMessageType_FireOffEditor',7);
    methodinfo=fcns;